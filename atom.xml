<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Phoenix&#39;s island</title>
  
  <subtitle>Sun will shine on the horizon.</subtitle>
  <link href="https://blog.phoenixlzx.com/atom.xml" rel="self"/>
  
  <link href="https://blog.phoenixlzx.com/"/>
  <updated>2021-02-03T02:29:56.124Z</updated>
  <id>https://blog.phoenixlzx.com/</id>
  
  <author>
    <name>Phoenix Nemo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 Linux 系统中升级超微 BIOS 固件</title>
    <link href="https://blog.phoenixlzx.com/2021/02/03/update-supermicro-bios-to-avoid-2021-issue-in-linux/"/>
    <id>https://blog.phoenixlzx.com/2021/02/03/update-supermicro-bios-to-avoid-2021-issue-in-linux/</id>
    <published>2021-02-03T01:33:17.000Z</published>
    <updated>2021-02-03T02:29:56.124Z</updated>
    
    <content type="html"><![CDATA[<p>最近突然有客户找来说 BIOS 进不去了呀…看截图 stuck 在 POST Code AB 大概就知道什么情况了。</p><p>这不就是经典的 y2k bug 再现嘛…</p><a id="more"></a><p>一般情况下，升级超微 BIOS 固件的推荐方式是制作 DOS 启动盘引导系统升级，不过现在 BIOS 进不去也没有物理 access 就只好在 Linux 里操作啦。</p><h3 id="获取设备信息"><a href="#获取设备信息" class="headerlink" title="获取设备信息"></a>获取设备信息</h3><p>简单命令 <code>lshw</code></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">~&gt; lshw | head -n 25</span><br><span class="line">localhost                  </span><br><span class="line">    description: System</span><br><span class="line">    product: X9SCL/X9SCM (To be<span class="built_in"> filled </span>by O.E.M.)</span><br><span class="line">    vendor: Supermicro</span><br><span class="line">    version: 0123456789</span><br><span class="line">    serial: 0123456789</span><br><span class="line">    width: 64 bits</span><br><span class="line">    capabilities: smbios-2.7 dmi-2.7 smp vsyscall32</span><br><span class="line">    configuration: boot=normal chassis=desktop family=To be<span class="built_in"> filled </span>by O.E.M. sku=To be<span class="built_in"> filled </span>by O.E.M. uuid=[reducted]</span><br><span class="line">  *-core</span><br><span class="line">       description: Motherboard</span><br><span class="line">       product: X9SCL/X9SCM</span><br><span class="line">       vendor: Supermicro</span><br><span class="line">       physical id: 0</span><br><span class="line">       version: 1.11A</span><br><span class="line">       serial: [reducted]</span><br><span class="line">       slot: To be<span class="built_in"> filled </span>by O.E.M.</span><br><span class="line">     *-firmware</span><br><span class="line">          description: BIOS</span><br><span class="line">          vendor: American Megatrends Inc.</span><br><span class="line">          physical id: 0</span><br><span class="line">          version: 1.1a</span><br><span class="line">          date: 09/28/2011</span><br><span class="line">          size: 64KiB</span><br><span class="line">          capacity: 8128KiB</span><br></pre></td></tr></table></figure><p><del>X9 主板不是 2015 年就 EOL 了吗这可真是够老了…</del></p><p>总之主板型号是 <code>X9SCM</code> 于是在超微找到了<a href="https://www.supermicro.com/about/policies/disclaimer.cfm?SoftwareItemID=12747">新版的 BIOS 固件</a>。下载到系统中解压得到一堆文件，其中 <code>X9SCM1.106</code> 这个文件就是需要的 BIOS 固件本体。</p><h3 id="编译-SUM-内核模块"><a href="#编译-SUM-内核模块" class="headerlink" title="编译 SUM 内核模块"></a>编译 SUM 内核模块</h3><p><a href="https://www.supermicro.com/en/solutions/management-software/supermicro-update-manager">Supermicro Update Manager (SUM)</a> 是用于在系统中控制 BIOS/BMC 的程序。首先<a href="https://www.supermicro.com/SwDownload/SwSelect_Free.aspx?cat=SUM">下载</a>并解压，得到 <code>sum</code> 二进制文件和一堆其他东西。在 <code>driver</code> 目录中发现了对应发行版预编译的内核模块，但是直接 <code>insmod sum_bios.ko</code> 出错，好在它也提供了源码，那么就直接编译吧。</p><p>首先安装对应内核的 Linux 头文件，搜索 <code>linux-headers</code> 一般都可以找到。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~&gt; uname -a</span><br><span class="line">Linux localhost <span class="number">4.19</span><span class="number">.0</span><span class="number">-13</span>-amd64 #<span class="number">1</span> SMP Debian <span class="number">4.19</span><span class="number">.160</span><span class="number">-2</span> (<span class="number">2020</span><span class="number">-11</span><span class="number">-28</span>) x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&gt; apt install linux-headers<span class="number">-4.19</span><span class="number">.0</span><span class="number">-13</span>-amd64 build-essential # 还需要 make 和 gcc</span><br></pre></td></tr></table></figure><p>进入 <code>driver/Source/Linux</code> 执行 <code>make</code>，如果成功编译，则 <code>insmod ./sum_bios.ko</code>。</p><p>嗯，这次没有报错了。</p><h3 id="升级-BIOS"><a href="#升级-BIOS" class="headerlink" title="升级 BIOS"></a>升级 BIOS</h3><p>升级命令和其他主板商以及 RH 系的包命名风格一样喜欢大小写混合 = =…</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~&gt; ./sum -c UpdateBios --file <span class="built_in">..</span>/X9SCM1.106/X9SCM1.106</span><br><span class="line">Supermicro Update Manager (<span class="keyword">for</span> UEFI BIOS) 2.5.1 (2020/11/12) (x86_64)</span><br><span class="line">Copyright(C) 2013-2020 Super Micro Computer, Inc. All rights reserved.</span><br><span class="line"></span><br><span class="line">WARNING: BIOS setting will be reset without option --preserve_setting</span><br><span class="line">Reading BIOS flash <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>. (100%)</span><br><span class="line">Writing BIOS flash <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>. (100%)</span><br><span class="line">Verifying BIOS flash <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>. (100%)</span><br><span class="line">Checking ME<span class="built_in"> Firmware </span><span class="built_in">..</span>.</span><br><span class="line">Putting ME data <span class="keyword">to</span> BIOS <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span> (100%)</span><br><span class="line">Writing ME region <span class="keyword">in</span> BIOS flash <span class="built_in">..</span>.</span><br><span class="line"> - Update success <span class="keyword">for</span> /FDT!!</span><br><span class="line"> - Updated Recovery Loader <span class="keyword">to</span> OPRx</span><br><span class="line"> - Updated FPT, MFSB, FTPR <span class="keyword">and</span> MFS</span><br><span class="line"> - ME Entire Image done</span><br><span class="line">WARNING:Must power cycle <span class="keyword">or</span> restart the<span class="built_in"> system </span><span class="keyword">for</span> the changes <span class="keyword">to</span> take effect!</span><br></pre></td></tr></table></figure><p>至此就基本完成啦。然后直接重启即可生效。</p><p>不过还是需要注意一下，升级固件都是有变砖风险的，某些情况下需要先联系硬件厂商支持确定升级路线。</p><p>以及新版 X10 开始升级 BIOS 需要激活 license 了… 嘛。<del>听说超微的密钥早就被提取出来写了算号器了（什</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近突然有客户找来说 BIOS 进不去了呀…看截图 stuck 在 POST Code AB 大概就知道什么情况了。&lt;/p&gt;
&lt;p&gt;这不就是经典的 y2k bug 再现嘛…&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>软件工程实践上的一点思考</title>
    <link href="https://blog.phoenixlzx.com/2019/06/01/thoughts-on-software-engineering/"/>
    <id>https://blog.phoenixlzx.com/2019/06/01/thoughts-on-software-engineering/</id>
    <published>2019-06-01T02:42:50.000Z</published>
    <updated>2020-09-14T04:20:19.886Z</updated>
    
    <content type="html"><![CDATA[<p>曾经大学时对于软件工程这类理论课不屑一顾，认为这些课本都是只在大学里讲学而并不实际参与工程的教授写的东西。但是经过这些年从自己开发程序编写代码，到与公司团队同学、兴趣圈的朋友一起开发项目，也积累、总结了一些经验和教训。正巧昨晚在游戏建设里参与了这类讨论，于是记下一些思考免得忘记。</p><a id="more"></a><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h4><p>命令方块是 Minecraft 里用于执行游戏命令、实现各种触发性或持续性功能的方块。在游戏地图中需要展示一些浮空的名称标签，便是用命令方块生成隐形盔甲架实现的。这些盔甲架参数复杂且需要在地图里很多特定位置生成，负责的同学便在每个生成的位置下面放了重新生成的命令方块，生成的坐标是相对坐标，因此写好标签的命令方块便可被无限复用。</p><p>由于盔甲架属于实体，而实体在 Minecraft 中被认为是不可靠的：有无数种可能这实体会被移动或被清除。<br>因此我的建议是：将这些命令方块全部放到控制室，坐标写成绝对坐标并加上统一标签，便可做到一键生成全部、一键清除全部。</p><p>该同学表示：不想写绝对坐标，因为很麻烦。</p><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h4><p>由于游戏玩法的需要，编写了新的插件。几天后按照原计划应当可以准备第一次基本功能测试时，负责开发的同学表示只写了大约 1/4 的功能。进度很慢的原因是 Minecraft 的实现过于糟糕，而 Spigot 和 Paper 等修改版也没有很好封装 API 导致几乎所有的事件都需要手动处理。</p><p>接下来的协同开发中该同学又在反复尝试对配置文件中属性类似的部分使用同一个序列化/反序列化方法处理、对不同配置文件中的不同物品记录项也加上了一层包装来使得其能够被一个序列化/反序列化方法处理、在其他一些程序逻辑上也在尝试复用代码减少冗余度。</p><p>我说，你先专心把功能快速叠出来，然后再去想优化的事情。<br>这位同学表示不能接受，他认为代码应该从编写时就是整洁的。</p><h4 id="论点：矫枉过正的代码复用"><a href="#论点：矫枉过正的代码复用" class="headerlink" title="论点：矫枉过正的代码复用"></a>论点：矫枉过正的代码复用</h4><p>代码复用是很常见的代码结构优化方式。更少的代码冗余可以减少维护的复杂度，也降低出错的可能。</p><p>但是在案例 1 中，如此复用代码（放置同样的命令方块）却实际上造成了更多的冗余：如果要修改一个属性，就需要记录整个世界里每一个命令方块的位置，然后一个个去修改它。相反，由于游戏世界地图里的建筑几乎不可能变化（虽然现实需求很少会有这种条件），统一放在控制室、hard code<br>所有的坐标作为一个大方法调用，却是在这需求前提下的更好的实现方式。如果需要修改属性，可以只在一个地方修改所有的命令方块。</p><p>或者说，重复放置命令方块的过程，就是 copy’n’paste 冗余代码的过程。</p><p>而案例 2 则更具有代表性。在项目初期，是否应当关注代码质量？<br>我认为是应当关注的，但是这基于开发者的工程实践经验。优秀的、熟练的开发者应当在代码编写时就能灵活使用各种简单的优化手段减少初期的代码冗余，但是对于在校大学生没有足够的项目经验时，面对紧凑的项目时间安排应当集中更多精力实现功能。此时过分关注代码优化会被分心导致各种问题——例如这位同学编写的代码基本没有能够一次通过所有测试的情况，而且绝大多数的错误都看起来只是粗心，并不是不理解、写不出的问题。</p><h4 id="论点：实现，调整，优化"><a href="#论点：实现，调整，优化" class="headerlink" title="论点：实现，调整，优化"></a>论点：实现，调整，优化</h4><blockquote><p>“Make it work, make it right, make it fast.” – Kent Beck</p></blockquote><p>这是很多软件工程推崇的敏捷开发指导方向。在案例 1 中，该同学只做了第一步——复用同样的、带有相对坐标的命令方块（方法）快速实现了所有的功能。但是从后续维护的角度来讲，这样的实现没有 make it right，更不用提 fast。</p><p>而在案例 2 中，这位同学将三个阶段在初期就全部揉进去，但是由于工程经验不足，在思考优化方案时花费了过多的精力，也导致了代码精度不够，反复修改也无法顺利通过测试。</p><p>从个人经验来看，前期的代码编写应注重功能实现，并在编码能力基础上直接编写清晰的代码结构。功能实现后，再根据需求和测试中的问题「重构」打磨细节、尝试更好的实现方式。这个过程不仅在完善整个程序，对自己的系统架构把握和设计经验也有很大的提升。最后一个阶段，则是针对性的优化少量代码使整个系统更加稳定、高效。</p><h4 id="论点：架构的改动"><a href="#论点：架构的改动" class="headerlink" title="论点：架构的改动"></a>论点：架构的改动</h4><p>这是一个比较小型的项目。需求和基本功能架构从一开始便已经讨论清楚。后续的调整不大，但是每当有少量的需求修改或架构微调，都导致了很大的代码变动。而按照这位同学的思路，每次改动都要重新思考代码结构，这浪费很多的时间。</p><p>从实际工程角度，需求变化并带来架构的微调甚至大改动都可以说是很常见的事情。在前期编码实现阶段如果揉入过多对于代码结构的过多考量，每次改动都可能会使这些思考的时间被浪费。因此，在前期编码时不应为架构考虑消耗过多的时间，而在重构过程中，由于已经完成基本的功能实现，且对已有代码还处在熟悉的热度，可以快速适配需要修改、调整的架构，并基于前期编码时的各种尝试和实验的结论选择最佳的实现方式。</p><p>以上是基于近期项目中的讨论，在软件工程层面上的思考。如有缺漏不当之处，欢迎指正。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;曾经大学时对于软件工程这类理论课不屑一顾，认为这些课本都是只在大学里讲学而并不实际参与工程的教授写的东西。但是经过这些年从自己开发程序编写代码，到与公司团队同学、兴趣圈的朋友一起开发项目，也积累、总结了一些经验和教训。正巧昨晚在游戏建设里参与了这类讨论，于是记下一些思考免得忘记。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>WireGuard 真香</title>
    <link href="https://blog.phoenixlzx.com/2019/05/07/get-started-with-wireguard/"/>
    <id>https://blog.phoenixlzx.com/2019/05/07/get-started-with-wireguard/</id>
    <published>2019-05-06T17:13:49.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p><del>真是老了跟不上时代了，这么好的东西为什么我现在才开始用？？</del></p><a id="more"></a><p>其实这东西刚出来就在关注了不过确实前段时间才有机会尝试折腾一下。优点很多，也有无数人写过文章介绍，所以就不再多废话。主要看中它的 PtP 特性（服务器之间）和支持漫游（服务器-客户端）。当然目前在梯子方面的表现，即便是优秀的隧道方案，但由于折腾的人多了，面对万里城墙，这谁顶得住哇。</p><p>所以本文只讨论 WireGuard 作为访问企业网的隧道方案，算是初步折腾的笔记。</p><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>一个基本的 PtP 配置结构 <code>/etc/wireguard/wg0.conf</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address = <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span></span><br><span class="line">PrivateKey = [CLIENT PRIVATE KEY]</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = [SERVER PUBLICKEY]</span><br><span class="line">AllowedIPs = <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>, <span class="number">10.123</span><span class="number">.45</span><span class="number">.0</span>/<span class="number">24</span>, <span class="number">1234</span>:<span class="number">4567</span>:<span class="number">89</span>ab::/<span class="number">48</span></span><br><span class="line">Endpoint = [SERVER ENDPOINT]:<span class="number">48574</span></span><br><span class="line">PersistentKeepalive = <span class="number">25</span></span><br></pre></td></tr></table></figure><p>生成私钥</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wg</span> <span class="string">genkey &gt; privatekey</span></span><br><span class="line"><span class="attr">chmod</span> <span class="string">600 privatekey</span></span><br></pre></td></tr></table></figure><p>基于私钥生成本机的公钥</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wg pubkey &lt;<span class="keyword"> private</span>key &gt;<span class="keyword"> public</span>key</span><br></pre></td></tr></table></figure><p>或者一步完成的操作</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wg genkey | <span class="type">tee</span> privatekey | <span class="type">wg</span> pubkey &gt; publickey</span><br></pre></td></tr></table></figure><p>额外生成预共享密钥来进一步增强安全性</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wg</span> genpsk &gt; preshared</span><br></pre></td></tr></table></figure><p>这样服务器之间的互联配置就基本完成了。使用 <code>wg-quick up &lt;config&gt;</code> 来快速启动 WireGuard。</p><p>如果要配合客户端使用，则需要配置 NAT。顺便如果客户端没有 IPv6，也可以通过此法来给客户端提供 IPv6 Enablement。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address = 10.200.200.1/24</span><br><span class="line">Address = fd42:42:42::1/64</span><br><span class="line">SaveConfig = <span class="literal">true</span></span><br><span class="line">ListenPort = 51820</span><br><span class="line">PrivateKey = [SERVER PRIVATE KEY]</span><br><span class="line"></span><br><span class="line"><span class="comment"># note - substitute eth0 in the following lines to match the Internet-facing interface</span></span><br><span class="line">PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t<span class="built_in"> nat </span>-A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -t<span class="built_in"> nat </span>-A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t<span class="built_in"> nat </span>-D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -t<span class="built_in"> nat </span>-A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line"><span class="comment"># client foo</span></span><br><span class="line">PublicKey = [FOO<span class="string">&#x27;s PUBLIC KEY]</span></span><br><span class="line"><span class="string">PresharedKey = [PRE-SHARED KEY]</span></span><br><span class="line"><span class="string">AllowedIPs = 10.200.200.2/32, fd42:42:42::2/128</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Peer]</span></span><br><span class="line"><span class="string"># client bar</span></span><br><span class="line"><span class="string">PublicKey = [BAR&#x27;</span>s PUBLIC KEY]</span><br><span class="line">AllowedIPs = 10.200.200.3/32, fd42:42:42::3/128</span><br></pre></td></tr></table></figure><p>在此例中需注意 <code>Allowed IPs</code> 不可 overlap 否则会造成包转发错误。</p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>与上文中服务器配置相照应的客户端配置示例如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address = 10.200.200.2/24</span><br><span class="line">Address = fd42:42:42::2/64</span><br><span class="line">PrivateKey = [FOO<span class="string">&#x27;s PRIVATE KEY]</span></span><br><span class="line"><span class="string">DNS = 1.1.1.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Peer]</span></span><br><span class="line"><span class="string">PublicKey = [SERVER PUBLICKEY]</span></span><br><span class="line"><span class="string">PresharedKey = [PRE-SHARED KEY]</span></span><br><span class="line"><span class="string">AllowedIPs = 0.0.0.0/0, ::/0</span></span><br><span class="line"><span class="string">Endpoint = [SERVER PUBLIC IP ADDRESS]:51820</span></span><br></pre></td></tr></table></figure><p>客户端的 <code>AllowedIPs</code> 如果使用 catch-all <code>0.0.0.0/0, ::/0</code> 也就会默认转发所有的流量到服务器。该选项实际作用是路由表，控制哪些流量需要经由服务器转发。</p><p>配置完毕即可使用 <code>wg-quick up &lt;config&gt;</code> 启动 WireGuard。如果一切顺利，通过路由追踪应该可以看到流量已经交由服务器转发。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>由于工作需要，经常合上笔记本动身前往其他地方。在接入传统企业网例如 L2TP/IPSec 甚至 AnyConnect 都无法保证设备下次进入工作状态时可以立即恢复连接。而 WireGuard 在不同网络、不同地域、不同网络中断时间等各种情况下均可在下次进入网络覆盖时立即恢复连接，再也不必担心网络中断恢复时手忙脚乱配置隧道或者不小心泄密啦。</p><p>目前唯一的不足，大概就是还没有 Windows 客户端，没有办法推广到非技术部门（虽然影响不到我…</p><p>总之，真香.jpg</p><p>Reference:</p><p>[1] <a href="https://wiki.archlinux.org/index.php/WireGuard">https://wiki.archlinux.org/index.php/WireGuard</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;真是老了跟不上时代了，这么好的东西为什么我现在才开始用？？&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>制作 Arch Linux 内存系统启动盘</title>
    <link href="https://blog.phoenixlzx.com/2018/12/14/bootable-archlinux-in-memory-rescue-system/"/>
    <id>https://blog.phoenixlzx.com/2018/12/14/bootable-archlinux-in-memory-rescue-system/</id>
    <published>2018-12-14T03:58:39.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p>之前尝试过 <a href="/2018/08/04/archlinux-ramroot-office-service-router/">Arch Linux in RAM</a> 完全运行在内存中的轻量业务系统，最近在维护一些物理服务器看到没有安装系统的服务器不断重启，想到了可以制作类似的内存系统启动盘，以高效完成系统测试、安装、远程维护等任务。</p><a id="more"></a><p>这时候就要祭出 <a href="https://wiki.archlinux.org/index.php/Archiso">mkarchiso</a> 大法了。这是自动化制作最新版 Arch Live 镜像的工具集，当然也可用于制作定制化的 Arch 镜像。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>首先安装 <code>archiso</code> 包</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&gt; sudo pacman -Syy archiso</span><br></pre></td></tr></table></figure><p>它提供了两种配置方案，一种是只包含基本系统的 <code>baseline</code>，一种是可以制作定制 ISO 的 <code>releng</code>。要制作维护用 ISO，当然是复制 <code>releng</code> 配置啦。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~&gt; cp -r <span class="regexp">/usr/</span>share<span class="regexp">/archiso/</span>configs<span class="regexp">/releng/</span> archlive</span><br><span class="line">~&gt; cd archlive</span><br></pre></td></tr></table></figure><h3 id="定制"><a href="#定制" class="headerlink" title="定制"></a>定制</h3><p>整个过程不要太简单。先来了解下各个文件的用途：</p><ul><li><code>build.sh</code> - 用于制作镜像的自动化脚本，可以在这里修改一些名称变量或制作过程的逻辑。</li><li><code>packages.x86_64</code> - 一份要安装的包列表，一行一个。</li><li><code>pacman.conf</code> - pacman 的配置文件，不用多说了吧。</li><li><code>airootfs</code> - Live 系统的 rootfs，除了安装的包之外，其他的定制（以及启动执行脚本等）都在这里。遵循 rootfs 的目录规则。</li><li><code>efiboot</code> / <code>syslinux</code> / <code>isolinux</code> 用于设置 BIOS / EFI 启动的配置。</li></ul><p>将 <code>[archlinuxcn]</code> 仓库加入 <code>pacman.conf</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[archlinuxcn]</span></span><br><span class="line"><span class="attr">Server</span> = https://cdn.repo.archlinuxcn.org/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>然后修改 <code>packages.x86_64</code>，加入 <code>archlinuxcn-keyring</code> 和其他需要预安装的包：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">archlinuxcn-keyring</span></span><br><span class="line"><span class="attribute">htop</span></span><br><span class="line"><span class="attribute">iftop</span></span><br><span class="line"><span class="attribute">iotop</span></span><br><span class="line"><span class="attribute">ipmitool</span></span><br></pre></td></tr></table></figure><p>按需修改即可啦。</p><p>要启动为内存系统，需要加启动参数 <code>copytoram</code>。</p><p>修改文件 <code>syslinux/archiso_pxe.cfg</code> 和 <code>syslinux/archiso_sys.cfg</code> 文件，在启动参数后加 <code>copytoram</code>，像这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INCLUDE boot/syslinux/archiso_head.cfg</span><br><span class="line"></span><br><span class="line">LABEL arch64</span><br><span class="line">TEXT HELP</span><br><span class="line">Boot the Arch Linux (x86_64) live medium.</span><br><span class="line">It allows you <span class="keyword">to</span> install Arch Linux <span class="keyword">or</span> perform<span class="built_in"> system </span>maintenance.</span><br><span class="line">ENDTEXT</span><br><span class="line">MENU LABEL Boot Arch Linux (x86_64)</span><br><span class="line">LINUX boot/x86_64/vmlinuz</span><br><span class="line">INITRD boot/intel_ucode.img,boot/amd_ucode.img,boot/x86_64/archiso.img</span><br><span class="line">APPEND <span class="attribute">archisobasedir</span>=%INSTALL_DIR% <span class="attribute">archisolabel</span>=%ARCHISO_LABEL% copytoram</span><br></pre></td></tr></table></figure><p>启动时即可将整个 SquashFS 文件复制到内存。如果内存比较小，也可以指定 <a href="https://git.archlinux.org/archiso.git/tree/docs/README.bootparams#n53"><code>copytoram_size</code></a> 来限制 tmpfs 占用内存的最大数量。</p><p>同样，也需要修改 <code>efiboot/loader/entries/archiso-x86_64-usb.conf</code> 的启动参数。在 <code>options</code> 行添加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options <span class="attribute">archisobasedir</span>=%INSTALL_DIR% <span class="attribute">archisolabel</span>=%ARCHISO_LABEL% copytoram</span><br></pre></td></tr></table></figure><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><p>创建工作目录和输出目录</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="keyword">work</span> <span class="keyword">out</span></span><br></pre></td></tr></table></figure><p>最后一步，只需要以 root 权限执行 <code>./build.sh</code> 就可以啦。</p><p>要看具体执行过程的话，加 <code>-v</code>。<code>-h</code> 看所有参数。</p><p>完成后，即可在 <code>out</code> 目录得到准备好的 ISO 文件。将其 <code>dd</code> 到 USB 闪存盘，大功告成(‘・ω・’)</p><p>Ref:</p><ol><li><a href="https://wiki.archlinux.org/index.php/Archiso">https://wiki.archlinux.org/index.php/Archiso</a></li><li><a href="https://git.archlinux.org/archiso.git/tree/docs/README.bootparams#n53">https://git.archlinux.org/archiso.git/tree/docs/README.bootparams#n53</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前尝试过 &lt;a href=&quot;/2018/08/04/archlinux-ramroot-office-service-router/&quot;&gt;Arch Linux in RAM&lt;/a&gt; 完全运行在内存中的轻量业务系统，最近在维护一些物理服务器看到没有安装系统的服务器不断重启，想到了可以制作类似的内存系统启动盘，以高效完成系统测试、安装、远程维护等任务。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用 fs.WriteStream 编写超简单的日志流</title>
    <link href="https://blog.phoenixlzx.com/2018/11/18/super-easy-logger-with-writestream/"/>
    <id>https://blog.phoenixlzx.com/2018/11/18/super-easy-logger-with-writestream/</id>
    <published>2018-11-18T10:08:44.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p>虽然 <code>console.log</code> 很好用，但是生产环境需要保存日志的时候就比较蛋疼。暴力 <code>fs.appendFile</code> 会消耗大量的 file handler，因此用 writable stream 来复用 file handler 是更好的选择。</p><a id="more"></a><p>大概是个不能再简单的思路了。先创建一个写入流</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logStream = fs.createWriteStream(<span class="string">&#x27;./test.log&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这样便创建了一个文件写入口，需要时直接调用 <code>logStream.write</code> 即可写入数据。<br>接下来编写一个用于记录日志的函数替代 <code>console.log</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span> <span class="params">(message)</span></span> &#123;</span><br><span class="line">    logStream.<span class="built_in">write</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此基本功能就写完啦。但是太简陋了对不对，还是要再加点装饰。</p><p>重写 <code>logger</code> 函数，区分 <code>stdout</code> 和 <code>stderr</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> logInfo = fs.create<span class="constructor">WriteStream(&#x27;.<span class="operator">/</span><span class="params">stdout</span>.<span class="params">log</span>&#x27;)</span>;</span><br><span class="line"><span class="keyword">let</span> logError = fs.create<span class="constructor">WriteStream(&#x27;.<span class="operator">/</span><span class="params">stderr</span>.<span class="params">log</span>&#x27;)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Logger = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Logger</span>.</span></span>info =<span class="function"> (<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    logInfo.write(&#x27;<span class="literal">[INFO]</span> &#x27; + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Logger</span>.</span></span>error =<span class="function"> (<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    logError.write(&#x27;<span class="literal">[ERROR]</span> &#x27; + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉还是少了点什么…日期？</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Logger.info = <span class="function"><span class="params">(message)</span> =&gt;</span> &#123;</span><br><span class="line">    logInfo.write(<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString() + <span class="string">&#x27; [INFO] &#x27;</span> + message + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯嗯。这就像样了。把代码整合起来</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logInfo = fs.create<span class="constructor">WriteStream(&#x27;.<span class="operator">/</span><span class="params">stdout</span>.<span class="params">log</span>&#x27;)</span>;</span><br><span class="line"><span class="keyword">let</span> logError = fs.create<span class="constructor">WriteStream(&#x27;.<span class="operator">/</span><span class="params">stderr</span>.<span class="params">log</span>&#x27;)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Logger = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Logger</span>.</span></span>info =<span class="function"> (<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    logInfo.write(<span class="keyword">new</span> <span class="constructor">Date()</span>.<span class="keyword">to</span><span class="constructor">ISOString()</span> + &#x27; <span class="literal">[INFO]</span> &#x27; + message + <span class="character">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Logger</span>.</span></span>error =<span class="function"> (<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    logError.write(<span class="keyword">new</span> <span class="constructor">Date()</span>.<span class="keyword">to</span><span class="constructor">ISOString()</span> + &#x27; <span class="literal">[ERROR]</span> &#x27; + message + <span class="character">&#x27;\n&#x27;</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.exports = Logger;</span><br></pre></td></tr></table></figure><p>需要用时</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logger.<span class="builtin-name">info</span>(<span class="string">&#x27;This is an information.&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在看对应的 <code>stdout.log</code> 文件就有相应内容啦。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~&gt; tail -f stdout.log</span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">52</span>:<span class="number">57.333</span>Z [INFO] This <span class="keyword">is</span> an information.</span><br></pre></td></tr></table></figure><p>不够刺激？</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="built_in">Array</span>(<span class="number">10000</span>)].forEach(<span class="function"><span class="params">(item, index)</span> =&gt;</span> &#123;</span><br><span class="line">    Logger.info(<span class="string">&#x27;Hello! &#x27;</span> + index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~&gt; tail -f stdout.log</span><br><span class="line">...</span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9990</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9991</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9992</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9993</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9994</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9995</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9996</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9997</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9998</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span><span class="number">-18</span>T10:<span class="number">58</span>:<span class="number">30.661</span>Z [INFO] Hello! <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>搞定(┌・ω・)┌超简单的吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然 &lt;code&gt;console.log&lt;/code&gt; 很好用，但是生产环境需要保存日志的时候就比较蛋疼。暴力 &lt;code&gt;fs.appendFile&lt;/code&gt; 会消耗大量的 file handler，因此用 writable stream 来复用 file handler 是更好的选择。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>重构 StickerSetBot</title>
    <link href="https://blog.phoenixlzx.com/2018/09/28/stickerset2packbot-refactory-with-telegraf/"/>
    <id>https://blog.phoenixlzx.com/2018/09/28/stickerset2packbot-refactory-with-telegraf/</id>
    <published>2018-09-28T02:51:03.000Z</published>
    <updated>2020-09-14T04:20:19.886Z</updated>
    
    <content type="html"><![CDATA[<p>关注 <a href="https://telegraf.js.org/">Telegraf</a> 有一段时间了。特别是最近 Telegram 上 spammer 猖獗导致 Telegram 对于用户行为限制越来越严格，由此想过写一个简单的 bot 来处理加群请求之类的。</p><p>总之原因都是没时间。终于搞定一些事情之后发现之前瞎写的 <a href="https://blog.phoenixlzx.com/2016/08/23/my-first-yet-useless-telegram-bot/">Telegram 导出贴图 bot</a> 居然备受欢迎…正好 Telegram Bot API 也更新了，来重构吧！</p><a id="more"></a><h2 id="拆分逻辑代码"><a href="#拆分逻辑代码" class="headerlink" title="拆分逻辑代码"></a>拆分逻辑代码</h2><p>最头疼的事情首先是当时写这 bot 的时候只顾着考虑各种情况，逻辑像流水一样全部写成一坨。虽然实际不复杂吧但这不是 best practice。于是把每个功能单独拆出来先。</p><p><code>on(&#39;command&#39;)</code> 的逻辑代码整块移出来作为 handler，然后能够原子化的功能再单独拆分成函数调用。目前的效果虽然还是有不少逻辑层在 handler 里，但是基本达到了比较方便维护的目的。</p><p><del>handler 本来就是拿来写逻辑的啊摔</del></p><p>接下来再清理冗余代码和各种 hard code，加了两个方法让代码看起来更整洁一些。于是就先这样。</p><h2 id="迁移框架"><a href="#迁移框架" class="headerlink" title="迁移框架"></a>迁移框架</h2><p>好在 Telegraf 和之前用的框架在参数上很多兼容，所以这没有花太多时间。顺便尝试采用了一部分 ES6 的风格，嘛…果然不喜欢。</p><p>所以就不要吐槽为什么 ES5 和 ES6 的风格混写了。</p><p>之前要一大长串的传参现在只要一个 <code>context</code> 了好方便啊。中间件也好方便啊~</p><p>以上。</p><h2 id="调试：无尽的-bugfix"><a href="#调试：无尽的-bugfix" class="headerlink" title="调试：无尽的 bugfix"></a>调试：无尽的 bugfix</h2><p>并不指望一通大换血之后的代码能一次跑起来…但是没跑起来的原因是我传错了中间件值这不能忍！！为什么一会儿传的是函数本体一会儿传的是函数调用啊摔！！</p><p>而且这问题还让我调了两个小时！！！</p><p><del>调通了之后就很舒服了</del></p><p>遇到的坑还有 <code>context</code> 本身不能当 session 用，然而不想再引入 session 中间件于是自己写了个超简陋的内存 session。就是为了多语言支持。因为一觉醒来发现这 bot 语言莫名其妙变中文了（<code>messages</code> 成了全局变量 = =</p><p>当然还有 Telegram 自己的坑，比如什么贴纸就是死下载不能然后整个程序就 hang 着了。</p><h2 id="一键导出贴纸包"><a href="#一键导出贴纸包" class="headerlink" title="一键导出贴纸包"></a>一键导出贴纸包</h2><p>终于！Telegram bot API 添加了 <code>StickerSet</code> 类型。只要有贴纸包名称，就可以获取整个贴纸包的信息。考虑不改变用户习惯的情况下（<del>你哪有什么用户啊可恶</del>）对本身处理贴纸和其他消息的函数做了修改，顺便又拆了俩函数出来（怎么代码越来越多了啊喂！</p><p>最后结果就是没有一屏看不到头的函数啦~（你快够</p><p>以及加入了用贴纸包链接导出一整组贴纸的功能，算是真正意义上的 StickerSetBot 了。</p><p><del>然后贴纸过多卡死了 Telegram 的 ratelimiting</del></p><h2 id="直接导出单张贴纸"><a href="#直接导出单张贴纸" class="headerlink" title="直接导出单张贴纸"></a>直接导出单张贴纸</h2><p>既然功能拆分了那也就方便加更多别的功能啦。比如不新建任务，直接甩过去一张贴纸来获得 PNG 文件~</p><p>这只 bot 在<a href="https://t.me/stickerset2packbot">这里</a>，源码在<a href="https://github.com/phoenixlzx/telegram-stickerimage-bot">这里</a>。欢迎各种玩坏~（记得去发 issue</p><p>就酱(,,•﹏•,,)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关注 &lt;a href=&quot;https://telegraf.js.org/&quot;&gt;Telegraf&lt;/a&gt; 有一段时间了。特别是最近 Telegram 上 spammer 猖獗导致 Telegram 对于用户行为限制越来越严格，由此想过写一个简单的 bot 来处理加群请求之类的。&lt;/p&gt;
&lt;p&gt;总之原因都是没时间。终于搞定一些事情之后发现之前瞎写的 &lt;a href=&quot;https://blog.phoenixlzx.com/2016/08/23/my-first-yet-useless-telegram-bot/&quot;&gt;Telegram 导出贴图 bot&lt;/a&gt; 居然备受欢迎…正好 Telegram Bot API 也更新了，来重构吧！&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Office Service Router 解决方案：Arch Linux in RAM</title>
    <link href="https://blog.phoenixlzx.com/2018/08/04/archlinux-ramroot-office-service-router/"/>
    <id>https://blog.phoenixlzx.com/2018/08/04/archlinux-ramroot-office-service-router/</id>
    <published>2018-08-04T08:03:11.000Z</published>
    <updated>2020-09-14T04:20:19.886Z</updated>
    
    <content type="html"><![CDATA[<p>一直把自己在办公室的 PC 保持开机用于连回办公区、存取数据工作需求。由于最近办公室所在的写字楼要全馆断电检点，所以诞生了构建一个 Service Router 的想法。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>运行在内存里对于 Linux 系统来说是完全可能（而且简单）的事情。</p><p>最直接的想法就是使用内核 hook 在启动时复制根分区到内存盘然后挂载内存里的数据作为根分区即可。</p><p>设备的话，设置 Power on AC 即可通电自启动。</p><h3 id="ramroot"><a href="#ramroot" class="headerlink" title="ramroot"></a>ramroot</h3><p>作为一只懒卷，这种简单的事情当然先顺手搜索下啦。然后就发现了几乎完美的解决方案——<a href="https://github.com/arcmags/ramroot">ramroot</a></p><p>ramroot 通过加入内核 hook 然后自动在内存建立 zram 分区，同步根分区数据再启动。还可以在启动时选择是否启动进内存，正好解决了所有的需求。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>硬件选择是一台便宜的 <a href="https://ark.intel.com/products/95062/Intel-NUC-Kit-NUC6CAYH">Intel NUC</a>，安装两根 4GB LPDDR3 低压内存和一块 120G 2.5 SSD。虽然说起来其实并不需要 SSD（因为数据全部都在内存里，速度比 SSD 更快）但是毕竟日本多震，还是为数据安全着想。毕竟硬盘坏了的话内存系统也无法启动了。</p><p><em>当然如果有集成 32GB eMMC 的小型 PC 的话也是好的选择。</em></p><p>正常安装完 Arch Linux 系统，安装 <code>openssh</code> 和各种必要的服务程序，修改配置文件，然后安装 ramroot 并执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ramroot <span class="built_in">enable</span></span></span><br></pre></td></tr></table></figure><p>此时先别急着重启，先把不需要的包、缓存等文件（<code>/var/cache</code>）删除，保持最小化的根分区。然后再重启。便可看到加载内核 hook 时的提示是否进入内存系统，默认超时后就会自动复制根分区到内存啦。</p><p>由于整个系统是运行在内存中的，所以完全没有等待读盘的时间。整个系统的响应速度非常快。限制是内存不够大的话运行一些业务会比较捉襟见肘，而且这样低功耗、低发热的 SoC 处理性能也只能运行一些轻型任务。</p><p>下面是一些 IO 性能测试</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ioping -s <span class="number">1</span>G /</span><br><span class="line"><span class="number">1</span> GiB &lt;&lt;&lt; . (ext4 /dev/zram0): request=<span class="number">1</span> time=<span class="number">1.04</span> s (warmup)</span><br><span class="line"><span class="number">1</span> GiB &lt;&lt;&lt; . (ext4 /dev/zram0): request=<span class="number">2</span> time=<span class="number">1.04</span> s</span><br><span class="line"><span class="number">1</span> GiB &lt;&lt;&lt; . (ext4 /dev/zram0): request=<span class="number">3</span> time=<span class="number">1.04</span> s</span><br><span class="line"><span class="number">1</span> GiB &lt;&lt;&lt; . (ext4 /dev/zram0): request=<span class="number">4</span> time=<span class="number">1.04</span> s</span><br><span class="line"><span class="number">1</span> GiB &lt;&lt;&lt; . (ext4 /dev/zram0): request=<span class="number">5</span> time=<span class="number">1.04</span> s</span><br><span class="line"><span class="number">1</span> GiB &lt;&lt;&lt; . (ext4 /dev/zram0): request=<span class="number">6</span> time=<span class="number">1.04</span> s ^C</span><br><span class="line"></span><br><span class="line">--- / (ext4 /dev/zram0) ioping statistics ---</span><br><span class="line"><span class="number">5</span> requests completed <span class="keyword">in</span> <span class="number">5.18</span> s, <span class="number">5</span> GiB read, <span class="number">0</span> iops, <span class="number">988.4</span> MiB/s</span><br><span class="line">generated <span class="number">6</span> requests <span class="keyword">in</span> <span class="number">7.20</span> s, <span class="number">6</span> GiB, <span class="number">0</span> iops, <span class="number">853.8</span> MiB/s</span><br><span class="line">min/avg/max/mdev = <span class="number">1.04</span> s / <span class="number">1.04</span> s / <span class="number">1.04</span> s / <span class="number">550.7</span> us</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ioping -RD /</span></span><br><span class="line"></span><br><span class="line"><span class="string">---</span> <span class="string">/</span> <span class="string">(ext4</span> <span class="string">/dev/zram0)</span> <span class="string">ioping</span> <span class="string">statistics</span> <span class="string">---</span></span><br><span class="line"><span class="number">530.0</span> <span class="string">k</span> <span class="string">requests</span> <span class="string">completed</span> <span class="string">in</span> <span class="number">2.49</span> <span class="string">s,</span> <span class="number">2.02</span> <span class="string">GiB</span> <span class="string">read,</span> <span class="number">212.9</span> <span class="string">k</span> <span class="string">iops,</span> <span class="number">831.7</span> <span class="string">MiB/s</span></span><br><span class="line"><span class="string">generated</span> <span class="number">530.0</span> <span class="string">k</span> <span class="string">requests</span> <span class="string">in</span> <span class="number">3.00</span> <span class="string">s,</span> <span class="number">2.02</span> <span class="string">GiB,</span> <span class="number">176.7</span> <span class="string">k</span> <span class="string">iops,</span> <span class="number">690.1</span> <span class="string">MiB/s</span></span><br><span class="line"><span class="string">min/avg/max/mdev</span> <span class="string">=</span> <span class="number">3.44</span> <span class="string">us</span> <span class="string">/</span> <span class="number">4.70</span> <span class="string">us</span> <span class="string">/</span> <span class="number">69.0</span> <span class="string">us</span> <span class="string">/</span> <span class="number">1.39</span> <span class="string">us</span></span><br></pre></td></tr></table></figure><p>可以看到系统根分区在 zram 里，经过压缩因此 IO 带宽受到了 CPU 处理性能的限制。但是 IOPS 依然高得爆表，对比一下 Intel Optane 900P 的 IOPS 性能：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ioping -RD /</span></span><br><span class="line">--- <span class="regexp">/ (ext4 /</span>dev/nvme0n1p1) ioping statistics ---</span><br><span class="line"><span class="number">163.1</span> k requests completed <span class="keyword">in</span> <span class="number">3.00</span> s, <span class="number">56.5</span> k iops, <span class="number">220.8</span> MiB/s</span><br><span class="line">min<span class="regexp">/avg/m</span>ax<span class="regexp">/mdev = 11 us /</span> <span class="number">17</span> us <span class="regexp">/ 114 us /</span> <span class="number">4</span> us</span><br></pre></td></tr></table></figure><p>炒鸡厉害对不对！</p><p>不过需要做永久性修改的话还是要下面的方法之一</p><ul><li>重新挂载磁盘（虽然并不麻烦）然后手动修改配置文件</li><li>重新挂载磁盘然后 rsync zram 到磁盘（方便但是可能会多一些不必要的东西）</li><li>重启进入磁盘系统然后运行修改（需要物理接触）</li></ul><h3 id="硬件设置"><a href="#硬件设置" class="headerlink" title="硬件设置"></a>硬件设置</h3><p>进入系统 BIOS 设置，开启 Power on AC 或设置 Power Failure 后的操作，选择为 Power On （默认一般是 Last State）。</p><p>关闭系统、拔出电源，或意外断电后，再接入电源即可自动开机引导系统。因为数据本身就只在内存中，除了运行中的临时更改会丢失，系统和硬盘本体都是安然无恙的。</p><p>再也不担心办公室断电检查啦。</p><p>大概就是这样。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直把自己在办公室的 PC 保持开机用于连回办公区、存取数据工作需求。由于最近办公室所在的写字楼要全馆断电检点，所以诞生了构建一个 Service Router 的想法。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>通过 SSH 修正安装有 GPU 的 HPE Proliant 服务器</title>
    <link href="https://blog.phoenixlzx.com/2018/08/04/fix-hpe-proliant-ilo4-display-with-gpu-installed-using-ssh/"/>
    <id>https://blog.phoenixlzx.com/2018/08/04/fix-hpe-proliant-ilo4-display-with-gpu-installed-using-ssh/</id>
    <published>2018-08-03T17:45:00.000Z</published>
    <updated>2020-09-14T04:20:19.886Z</updated>
    
    <content type="html"><![CDATA[<p>由于越来越多的渲染、压制等需求，托供货商的关系搞来一台带有独立显卡的 HPE 服务器。经过几番折腾（包括特别奇怪的 LS26-C14 电源线）麻烦了帮忙托管的数据中心的大兄弟好几回，终于算是上架可以开机了。</p><p>登入 iLO，安装许可证，启动 iLO Remote Console，打开电源，一切都很顺利。但是 Console 里显示 Early Initialization… 完成后，突然画面一黑，完全没了动静。</p><a id="more"></a><p>以为 iLO 出了 bug，冷重启好几次都是一样的结果。百思不得其解。</p><p>再重启一次。仔细观察了一番发现虽然没了画面，但是 POST Code 还是不断变化的，而且 Virtual Media 指示灯不断在闪烁，说明系统仍在正常运行，只是没有视频输出而已。</p><p>因此问题定位在视频输出而非系统硬件。既然这台服务器装了显卡，那么很可能是 PCI-e 初始化后视频输出全部交给显卡处理了。搜索了一下 HPE Community，确实有这样的情况存在。解决方案是通过 BIOS 修改显卡设置为默认集成显卡、备选独立显卡。</p><p>尝试在设备初始化阶段进入 BIOS，失败。</p><p>联系数据中心远程操作的话，可能要等一段时间。</p><p>纠结时随便点开 iLO 的管理页面，突然发现了华点：这货居然支持 SSH。</p><p>对啦，HPE 的底层系统几乎都是魔改版 Linux，连他们的 SmartArray 都是 Linux 启动一个 Firefox 浏览器来操作的（X</p><p>于是正好在网上搜到一篇<a href="https://lukas.dzunko.sk/index.php/Hardware:_HP_Microserver_-_How_to_fix_ILO4_after_adding_second_graphics_card">通过 SSH 修改 BIOS 视频设置</a>的方法。记录如下。</p><h3 id="SSH-进入-iLO"><a href="#SSH-进入-iLO" class="headerlink" title="SSH 进入 iLO"></a>SSH 进入 iLO</h3><p>确保 SSH 在 iLO 管理页面中已开启，然后使用 SSH 客户端正常连接：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="symbol">Administrator@</span><span class="number">10.6</span><span class="number">.254</span><span class="number">.121</span></span><br></pre></td></tr></table></figure><p>（ssh 用户名是 Administrator 感觉各种违和）</p><h3 id="连接到-Virtual-Serial-Port"><a href="#连接到-Virtual-Serial-Port" class="headerlink" title="连接到 Virtual Serial Port"></a>连接到 Virtual Serial Port</h3><p>命令很简单：<code>vsp</code></p><p>在 iLO 管理页面重启系统，然后等待初始化完成。如果看到按下 <code>F9</code> 进入 BIOS 设置的提示，<strong>不要按下它</strong>否则会进入 GUI 模式（于是又去独立显卡了就。</p><p>看到 <code>ESC</code> + <code>9</code> 进入 BIOS Setup Utility 时按下键组合，稍等一会儿应该就可以看到提示符 <code>rbsu&gt;</code>。</p><h3 id="修改视频设置"><a href="#修改视频设置" class="headerlink" title="修改视频设置"></a>修改视频设置</h3><p>命令 <code>SHOW CONFIG VIDEO OPTIONS</code></p><p>显示如下</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">|Optional Video Primary, Embedded Video Disabled &lt;=</span></span><br><span class="line"><span class="number">2</span><span class="string">|Optional Video Primary, Embedded Video Secondary</span></span><br><span class="line"><span class="number">3</span><span class="string">|Embedded Video Primary, Optional Video Secondary</span></span><br></pre></td></tr></table></figure><p>即默认关闭了集成显卡，只用独立显卡（不觉得很蠢吗！</p><p>于是修改为第三项，默认使用集成显卡，独立显卡作为备用。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span><span class="built_in"> CONFIG </span>VIDEO OPTIONS 3</span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">|Optional Video Primary, Embedded Video Disabled</span></span><br><span class="line"><span class="number">2</span><span class="string">|Optional Video Primary, Embedded Video Secondary</span></span><br><span class="line"><span class="number">3</span><span class="string">|Embedded Video Primary, Optional Video Secondary &lt;=</span></span><br></pre></td></tr></table></figure><p>然后敲 <code>EXIT</code> 退出并重启系统。</p><h3 id="安装系统和驱动"><a href="#安装系统和驱动" class="headerlink" title="安装系统和驱动"></a>安装系统和驱动</h3><p>至此即可通过 iLO Advanced Console 正常安装操作系统。不过需要注意的是进入操作系统后即便安装了对应的显卡驱动，依然默认使用的是集成显卡。以及 RDP 只能使用软解，无法使用独立显卡加速视频输出。这不影响 Blender 或者 Cinema 4D 等直接操作显卡进行计算的程序，但是会影响直接输出视频到桌面的程序。通过 Teamviewer 则可以强制桌面运行在独立显卡上。</p><p>顺便吐槽：Blender 把我的工程材质弄丢了…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于越来越多的渲染、压制等需求，托供货商的关系搞来一台带有独立显卡的 HPE 服务器。经过几番折腾（包括特别奇怪的 LS26-C14 电源线）麻烦了帮忙托管的数据中心的大兄弟好几回，终于算是上架可以开机了。&lt;/p&gt;
&lt;p&gt;登入 iLO，安装许可证，启动 iLO Remote Console，打开电源，一切都很顺利。但是 Console 里显示 Early Initialization… 完成后，突然画面一黑，完全没了动静。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>在线扩展 LVM root 分区</title>
    <link href="https://blog.phoenixlzx.com/2018/06/06/resize-lvm-rootfs-online/"/>
    <id>https://blog.phoenixlzx.com/2018/06/06/resize-lvm-rootfs-online/</id>
    <published>2018-06-06T14:31:03.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p><del><em>才不是没东西写了呢</em></del></p><p>遇到一个奇葩的原因导致 root 分区被占满的。而且还是奇葩的 CentOS，root 分区是 LVM，Hypervisor 里扩展磁盘后无法直接用 resize2fs。</p><a id="more"></a><p>既然如此就只能暴力重建分区咯。</p><h4 id="重建分区"><a href="#重建分区" class="headerlink" title="重建分区"></a>重建分区</h4><p>操作前确保操作的分区和之后新建时 Start 保持一致，修改分区表后不至于分区崩坏。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">~&gt; fidks /dev/sda</span><br><span class="line">Welcome <span class="keyword">to</span> fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide <span class="keyword">to</span> write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> help): p</span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 103.1 GB, 103079215104 bytes, 201326592 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x000a8e23</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200    50331647    24116224   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> help): d</span><br><span class="line">Partition number (1,2,<span class="built_in"> default </span>2): 2</span><br><span class="line">Partition 2 is deleted</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p):</span><br><span class="line">Using<span class="built_in"> default </span>response p</span><br><span class="line">Partition number (2-4,<span class="built_in"> default </span>2):</span><br><span class="line">First sector (2099200-201326591,<span class="built_in"> default </span>2099200):</span><br><span class="line">Using<span class="built_in"> default </span>value 2099200</span><br><span class="line">Last sector, +sectors <span class="keyword">or</span> +size&#123;K,M,G&#125; (2099200-201326591,<span class="built_in"> default </span>201326591):</span><br><span class="line">Using<span class="built_in"> default </span>value 201326591</span><br><span class="line">Partition 2 of<span class="built_in"> type </span>Linux <span class="keyword">and</span> of size 95 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> help): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() <span class="keyword">to</span> re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with <span class="builtin-name">error</span> 16: Device <span class="keyword">or</span><span class="built_in"> resource </span>busy.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot <span class="keyword">or</span> after you <span class="builtin-name">run</span> partprobe(8) <span class="keyword">or</span> kpartx(8)</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br><span class="line">~&gt; partprobe</span><br></pre></td></tr></table></figure><p>现在就可以看到 <code>/dev/sda2</code> 的大小已经变化了：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~&gt; lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               <span class="number">8</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">96</span>G  <span class="number">0</span> disk</span><br><span class="line">├─sda1            <span class="number">8</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">└─sda2            <span class="number">8</span>:<span class="number">2</span>    <span class="number">0</span>   <span class="number">95</span>G  <span class="number">0</span> part</span><br><span class="line">  ├─centos-root <span class="number">253</span>:<span class="number">0</span>    <span class="number">0</span> <span class="number">20.6</span>G  <span class="number">0</span> lvm  /</span><br><span class="line">  └─centos-swap <span class="number">253</span>:<span class="number">1</span>    <span class="number">0</span>  <span class="number">2.4</span>G  <span class="number">0</span> lvm  [SWAP]</span><br><span class="line">sr0              <span class="number">11</span>:<span class="number">0</span>    <span class="number">1</span>  <span class="number">906</span>M  <span class="number">0</span> rom</span><br></pre></td></tr></table></figure><h4 id="扩展-Volume-Group"><a href="#扩展-Volume-Group" class="headerlink" title="扩展 Volume Group"></a>扩展 Volume Group</h4><p>VG 的好处也就是能够灵活扩展分区大小…</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~&gt; pvresize /dev/sda2</span><br><span class="line">  Physical <span class="keyword">volume</span><span class="bash"> <span class="string">&quot;/dev/sda2&quot;</span> changed</span></span><br><span class="line">  <span class="number">1</span> physical <span class="keyword">volume</span><span class="bash">(s) resized / 0 physical volume(s) not resized</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">~&gt; vgdisplay</span><br><span class="line">  --- Volume<span class="built_in"> group </span>---</span><br><span class="line">  VG Name               centos</span><br><span class="line"> <span class="built_in"> System </span>ID</span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence <span class="literal">No</span>  4</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                2</span><br><span class="line">  Open LV               2</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               &lt;95.00 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              24319</span><br><span class="line">  Alloc PE / Size       5887 / &lt;23.00 GiB</span><br><span class="line">  Free  PE / Size       18432 / 72.00 GiB</span><br><span class="line">  VG UUID               TpbtuH-AjTZ-PU3v-UN31-FvfX-kSLv-xLiJG7</span><br></pre></td></tr></table></figure><p>至此已经可以看到 <code>Free PE</code> 的部分有多出的 72GB 空间。</p><h4 id="扩展-Logic-Volume"><a href="#扩展-Logic-Volume" class="headerlink" title="扩展 Logic Volume"></a>扩展 Logic Volume</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~&gt; lvextend -r -l +100%FREE /dev/centos/root</span><br><span class="line">  Size of logical volume centos/root changed <span class="keyword">from</span> 20.59 GiB (5272 extents) <span class="keyword">to</span> 92.59 GiB (23704 extents).</span><br><span class="line">  Logical volume centos/root successfully resized.</span><br><span class="line"><span class="attribute">meta-data</span>=/dev/mapper/centos-root <span class="attribute">isize</span>=512    <span class="attribute">agcount</span>=4, <span class="attribute">agsize</span>=1349632 blks</span><br><span class="line">         =                       <span class="attribute">sectsz</span>=512   <span class="attribute">attr</span>=2, <span class="attribute">projid32bit</span>=1</span><br><span class="line">         =                       <span class="attribute">crc</span>=1        <span class="attribute">finobt</span>=0 <span class="attribute">spinodes</span>=0</span><br><span class="line">data     =                       <span class="attribute">bsize</span>=4096   <span class="attribute">blocks</span>=5398528, <span class="attribute">imaxpct</span>=25</span><br><span class="line">         =                       <span class="attribute">sunit</span>=0      <span class="attribute">swidth</span>=0 blks</span><br><span class="line">naming   =version 2              <span class="attribute">bsize</span>=4096   <span class="attribute">ascii-ci</span>=0 <span class="attribute">ftype</span>=1</span><br><span class="line">log      =internal               <span class="attribute">bsize</span>=4096   <span class="attribute">blocks</span>=2636, <span class="attribute">version</span>=2</span><br><span class="line">         =                       <span class="attribute">sectsz</span>=512   <span class="attribute">sunit</span>=0 blks, <span class="attribute">lazy-count</span>=1</span><br><span class="line">realtime =none                   <span class="attribute">extsz</span>=4096   <span class="attribute">blocks</span>=0, <span class="attribute">rtextents</span>=0</span><br><span class="line">data blocks changed <span class="keyword">from</span> 5398528 <span class="keyword">to</span> 24272896</span><br></pre></td></tr></table></figure><p>确认效果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">~&gt; lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               <span class="number">8</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">96</span>G  <span class="number">0</span> disk </span><br><span class="line">├─sda1            <span class="number">8</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">└─sda2            <span class="number">8</span>:<span class="number">2</span>    <span class="number">0</span>   <span class="number">95</span>G  <span class="number">0</span> part </span><br><span class="line">  ├─centos-root <span class="number">253</span>:<span class="number">0</span>    <span class="number">0</span> <span class="number">92.6</span>G  <span class="number">0</span> lvm  /</span><br><span class="line">  └─centos-swap <span class="number">253</span>:<span class="number">1</span>    <span class="number">0</span>  <span class="number">2.4</span>G  <span class="number">0</span> lvm  [SWAP]</span><br><span class="line">sr0              <span class="number">11</span>:<span class="number">0</span>    <span class="number">1</span>  <span class="number">906</span>M  <span class="number">0</span> rom</span><br><span class="line"></span><br><span class="line">~&gt; df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root   <span class="number">93</span>G   <span class="number">21</span>G   <span class="number">73</span>G  <span class="number">23</span>% /</span><br><span class="line">devtmpfs                 <span class="number">3.9</span>G     <span class="number">0</span>  <span class="number">3.9</span>G   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                    <span class="number">3.9</span>G  <span class="number">8.0</span>K  <span class="number">3.9</span>G   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs                    <span class="number">3.9</span>G  <span class="number">8.6</span>M  <span class="number">3.9</span>G   <span class="number">1</span>% /run</span><br><span class="line">tmpfs                    <span class="number">3.9</span>G     <span class="number">0</span>  <span class="number">3.9</span>G   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               <span class="number">1014</span>M  <span class="number">185</span>M  <span class="number">830</span>M  <span class="number">19</span>% /boot</span><br><span class="line">tmpfs                    <span class="number">783</span>M     <span class="number">0</span>  <span class="number">783</span>M   <span class="number">0</span>% /run/user/<span class="number">0</span></span><br></pre></td></tr></table></figure><p>搞定收工(‘・ω・’)</p><h4 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h4><p>其实虚拟机还用 LVM 的话，直接新增一块虚拟硬盘是最方便的方案。直接 <code>vgextend</code> 一路搞定…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;&lt;em&gt;才不是没东西写了呢&lt;/em&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;遇到一个奇葩的原因导致 root 分区被占满的。而且还是奇葩的 CentOS，root 分区是 LVM，Hypervisor 里扩展磁盘后无法直接用 resize2fs。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>在 Linux 服务器配置 LACP 与 VLAN</title>
    <link href="https://blog.phoenixlzx.com/2018/04/18/play-with-linux-lacp-bonding-on-vlan/"/>
    <id>https://blog.phoenixlzx.com/2018/04/18/play-with-linux-lacp-bonding-on-vlan/</id>
    <published>2018-04-18T05:59:11.000Z</published>
    <updated>2020-09-14T04:20:19.879Z</updated>
    
    <content type="html"><![CDATA[<p>存储服务器不想放在 OVH 了。所以自己来托管一台机器，顺便折腾下 2x1Gbps 组 LACP Bonding。</p><a id="more"></a><p>前提：服务器需要至少 2 个千兆物理网卡，上联交换机支持 802.3ad。</p><h3 id="配置交换机"><a href="#配置交换机" class="headerlink" title="配置交换机"></a>配置交换机</h3><p>这里使用的是 Cisco Nexus 3064PQ-10GE 交换机，我们的接口在 <code>Eth1/21-22</code>，port-channel 的配置如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show interface trunk</span></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Port          Native  Status        Port</span><br><span class="line">             <span class="built_in"> Vlan </span>                 Channel</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Eth1/21       1       trnk-bndl     Po100</span><br><span class="line">Eth1/22       1       trnk-bndl     Po100</span><br><span class="line">Po100         1       trunking      --</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">show port-channel database</span><br><span class="line">port-channel100</span><br><span class="line">    Last membership update <span class="keyword">is</span> successful</span><br><span class="line">    <span class="number">2</span> ports <span class="keyword">in</span> total, <span class="number">2</span> ports up</span><br><span class="line">    First operational port <span class="keyword">is</span> Ethernet1/<span class="number">21</span></span><br><span class="line">    Age of the port-channel <span class="keyword">is</span> <span class="number">0</span>d:<span class="number">00</span>h:<span class="number">02</span>m:<span class="number">16</span>s</span><br><span class="line">    Time since last bundle <span class="keyword">is</span> <span class="number">0</span>d:<span class="number">00</span>h:<span class="number">02</span>m:<span class="number">04</span>s</span><br><span class="line">    Last bundled member <span class="keyword">is</span> Ethernet1/<span class="number">22</span></span><br><span class="line">    Ports:   Ethernet1/<span class="number">21</span>    [active ] [up] *</span><br><span class="line">             Ethernet1/<span class="number">22</span>    [active ] [up]</span><br></pre></td></tr></table></figure><h3 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h3><p>服务器操作系统是 Arch Linux，由于蜜汁问题 netctl 无法启动网卡，就只好用 systemd-networkd 啦。</p><p>麻烦一些，但是也还算顺利。与往常一样，折腾服务器网络的时候需要备着 IPMI 以防 connection lost。</p><h5 id="内核模块"><a href="#内核模块" class="headerlink" title="内核模块"></a>内核模块</h5><p>需要加载 <code>bonding</code> 模块。将模块名写入列表，文件 <code>/etc/modules-load.d/bonding.conf</code>，内容只需要一行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bonding</span></span><br></pre></td></tr></table></figure><p>先别急着加载模块，为了防止模块自动建立一个默认网卡影响后续配置，以及设置 LACP Mode=4 … 等等，先加入一行参数。文件 <code>/etc/modprobe.d/bonding.conf</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options bonding <span class="attribute">mode</span>=4 <span class="attribute">miimon</span>=100 <span class="attribute">max_bonds</span>=0</span><br></pre></td></tr></table></figure><p>然后安装 <code>ifenslave</code> 包，再 <code>modprobe bonding</code> 即可。</p><h5 id="bonding-虚拟网卡"><a href="#bonding-虚拟网卡" class="headerlink" title="bonding 虚拟网卡"></a>bonding 虚拟网卡</h5><p>首先创建一个虚拟网卡的设备。文件 <code>/etc/systemd/network/bond0.netdev</code> 内容为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[NetDev]</span></span><br><span class="line"><span class="attr">Name</span>=bond0</span><br><span class="line"><span class="attr">Kind</span>=bond</span><br><span class="line"></span><br><span class="line"><span class="section">[Bond]</span></span><br><span class="line"><span class="attr">Mode</span>=<span class="number">802.3</span>ad</span><br><span class="line"><span class="attr">TransmitHashPolicy</span>=layer2+<span class="number">3</span></span><br><span class="line"><span class="attr">LACPTransmitRate</span>=fast</span><br><span class="line"><span class="attr">AdSelect</span>=bandwidth</span><br></pre></td></tr></table></figure><p>然后在此虚拟网卡上创建网络。这里使用两个物理网卡 <code>eth0</code> 和 <code>eth1</code> 作为 bundle，交换机上的 VLAN id 是 <code>113</code>。文件 <code>/etc/systemd/network/bond0.network</code> 内容为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Match]</span></span><br><span class="line"><span class="attr">Name</span>=bond0</span><br><span class="line"></span><br><span class="line"><span class="section">[Network]</span></span><br><span class="line"><span class="attr">VLAN</span>=vlan113</span><br><span class="line"><span class="attr">BindCarrier</span>=eth0 eth1</span><br></pre></td></tr></table></figure><p>接下来分别为 <code>eth0</code> 和 <code>eth1</code> 建立网络设置。</p><ul><li><code>/etc/systemd/network/eth0.network</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Match]</span></span><br><span class="line"><span class="attr">Name</span>=eth0</span><br><span class="line"></span><br><span class="line"><span class="section">[Network]</span></span><br><span class="line"><span class="attr">Bond</span>=bond0</span><br></pre></td></tr></table></figure><ul><li><code>/etc/systemd/network/eth1.network</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Match]</span></span><br><span class="line"><span class="attr">Name</span>=eth1</span><br><span class="line"></span><br><span class="line"><span class="section">[Network]</span></span><br><span class="line"><span class="attr">Bond</span>=bond0</span><br></pre></td></tr></table></figure><p>最后是 VLAN 的设置。前面设置了上联 VLAN id 是 113，这里分别建立 VLAN 的虚拟网卡(based on bond0) 并设置网络(IP, etc)。</p><ul><li><code>/etc/systemd/network/vlan113.netdev</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[NetDev]</span></span><br><span class="line"><span class="attr">Name</span>=vlan113</span><br><span class="line"><span class="attr">Kind</span>=vlan</span><br><span class="line"></span><br><span class="line"><span class="section">[VLAN]</span></span><br><span class="line"><span class="attr">Id</span>=<span class="number">113</span></span><br></pre></td></tr></table></figure><ul><li><code>/etc/systemd/network/vlan113.network</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Match]</span></span><br><span class="line"><span class="attr">Name</span>=vlan113</span><br><span class="line"></span><br><span class="line"><span class="section">[Network]</span></span><br><span class="line"><span class="attr">VLAN</span>=vlan113</span><br><span class="line"></span><br><span class="line"><span class="section">[Address]</span></span><br><span class="line"><span class="attr">Address</span>=<span class="number">10.1</span>.<span class="number">0.100</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Route]</span></span><br><span class="line"><span class="attr">Destination</span>=<span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span></span><br><span class="line"><span class="attr">Gateway</span>=<span class="number">10.1</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">DNS</span>=<span class="number">1.1</span>.<span class="number">1.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Address]</span></span><br><span class="line"><span class="attr">Address</span>=<span class="number">2600</span>:x:x:x::<span class="number">2</span>/<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Route]</span></span><br><span class="line"><span class="attr">Gateway</span>=<span class="number">2600</span>:x:x:x::<span class="number">1</span></span><br></pre></td></tr></table></figure><p>多个地址、IPv6 等可以写多个 <code>[Address]</code> 和 <code>[Route]</code>。</p><p>至此就完成啦。开启 systemd-networkd 的自启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> systemd-networkd.service</span><br></pre></td></tr></table></figure><p>然后重启网络：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">restart</span> <span class="selector-tag">systemd-networkd</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><p>如果配置都没有问题，网络会中断十几秒然后恢复。现在查看网卡列表已经可以看到组合的网卡了：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip l</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc mq master bond0 state UP mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/ether &lt;REDACTED&gt; brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc mq master bond0 state UP mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/ether &lt;REDACTED&gt; brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: eth2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/ether &lt;REDACTED&gt; brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: eno1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/ether &lt;REDACTED&gt; brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: bond0: &lt;BROADCAST,MULTICAST,MASTER,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/ether &lt;REDACTED&gt; brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: vlan113@bond0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/ether &lt;REDACTED&gt; brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p><code>ethtool</code> 查看 <code>bond0</code> 的速率显示 <code>2000Mb/s</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ethtool bond0</span></span><br><span class="line"><span class="attr">Settings for bond0:</span></span><br><span class="line">        <span class="attr">Supported ports:</span> [ ]</span><br><span class="line">        <span class="attr">Supported link modes:</span>   <span class="string">Not</span> <span class="string">reported</span></span><br><span class="line">        <span class="attr">Supported pause frame use:</span> <span class="literal">No</span></span><br><span class="line">        <span class="attr">Supports auto-negotiation:</span> <span class="literal">No</span></span><br><span class="line">        <span class="attr">Supported FEC modes:</span> <span class="string">Not</span> <span class="string">reported</span></span><br><span class="line">        <span class="attr">Advertised link modes:</span>  <span class="string">Not</span> <span class="string">reported</span></span><br><span class="line">        <span class="attr">Advertised pause frame use:</span> <span class="literal">No</span></span><br><span class="line">        <span class="attr">Advertised auto-negotiation:</span> <span class="literal">No</span></span><br><span class="line">        <span class="attr">Advertised FEC modes:</span> <span class="string">Not</span> <span class="string">reported</span></span><br><span class="line">        <span class="attr">Speed:</span> <span class="string">2000Mb/s</span></span><br><span class="line">        <span class="attr">Duplex:</span> <span class="string">Full</span></span><br><span class="line">        <span class="attr">Port:</span> <span class="string">Other</span></span><br><span class="line">        <span class="attr">PHYAD:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">Transceiver:</span> <span class="string">internal</span></span><br><span class="line">        <span class="attr">Auto-negotiation:</span> <span class="string">off</span></span><br><span class="line">        <span class="attr">Link detected:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>搞定收工(‘・ω・’)</p><p>Reference:</p><ul><li><a href="https://wiki.archlinux.org/index.php/Netctl#Bonding">Arch Linux Wiki: Netctl#Bonding</a></li><li><a href="https://wiki.archlinux.org/index.php/VLAN#systemd-networkd_bonded_interface">Arch Linux Wiki: VLAN#systemd-networkd-bonded-interface</a></li><li><a href="https://wiki.archlinux.org/index.php/systemd-networkd">Arch Linux Wiki: Systemd-networkd</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;存储服务器不想放在 OVH 了。所以自己来托管一台机器，顺便折腾下 2x1Gbps 组 LACP Bonding。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>迁移 DokuWiki 到 BookStackApp</title>
    <link href="https://blog.phoenixlzx.com/2018/03/23/migrate-dokuwiki-to-bookstack/"/>
    <id>https://blog.phoenixlzx.com/2018/03/23/migrate-dokuwiki-to-bookstack/</id>
    <published>2018-03-22T15:12:08.000Z</published>
    <updated>2020-09-14T04:20:19.876Z</updated>
    
    <content type="html"><![CDATA[<p>Wiki 这么反人类的语法是怎么存在这么久的？？？？？？？</p><a id="more"></a><p>总之受不了 Wiki 语法的可维护性了。什么？这玩意儿有维护性？？？</p><p>以及万年不更新的各种插件。系统升级后 PHP 7 不兼容，一看还是 swiftmail 的问题。生气。</p><p>正好有需求要整合一套知识库平台，搜索了一下 Confluence 的 alternative，发现了 <a href="https://www.bookstackapp.com/">BookStackApp</a> 和 <a href="https://www.phacility.com/">Phabricator</a>。</p><p>前者适合个人或开源社区使用，后者则是一整套企业协作解决方案。对于我的需求来讲，BookStackApp 就足够啦。</p><h3 id="页面数据"><a href="#页面数据" class="headerlink" title="页面数据"></a>页面数据</h3><p>DokuWiki 并不使用数据库，因此没有一个通用的中间件来实现数据格式转换。而 DokuWiki 的语法非常奇葩——比如，它的一级标题是 <code>====== 这样 ======</code>，六级标题才是 <code>= 这样 =</code>，正好和一般的 Wikitext 倒置。图片、内链等的表达方式也相当愚蠢，这些问题使我在思考迁移方案的第一个小时内就放弃了直接从源码转移的途径。</p><p>顺便，还有另外一个问题——本来为了使 Wiki 易于编写，这 DokuWiki 还安装了 Markdown 插件。因此部分页面中混杂着 Markdown 语法，更增加了源码处理的复杂度。</p><p>综合来看，最通用的数据格式，就是最终渲染出来的 XHTML 了。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>DokuWiki 的图片存储策略也是非常的奇特。由于它没有数据库，因此为了保持图片与页面的对应，它将图片存储在每个页面同样的路径下，并通过执行 PHP 的方式获取（扶额。</p><p>更甚者！！！</p><p>外链的图片，也是通过 <code>/lib/exe/fetch.php</code> 带参数来获取！！</p><p>我  的  天  哪。</p><p>因此既然在页面数据的考量中决定了使用最终渲染输出的 XHTML 来处理数据格式，图片也需要特殊的下载和归档技巧。这将需要使用 <code>sanitize-html</code> 提供的 <code>transformer</code> 方法来实现。</p><h3 id="逻辑实现"><a href="#逻辑实现" class="headerlink" title="逻辑实现"></a>逻辑实现</h3><p>一开始尝试了一些 Site Exporter 插件，但遗憾的是并没有什么真正能派上用场。甚至一些暴力递归下载所有页面和资源的脚本的表现也非常糟糕。</p><p>但是根据 DokuWiki 的官方 Tips，它可以将文章内容单纯导出 XHTML，只需要加上 <code>?do=export_xhtmlbody</code> 参数即可。这就方便了，因为这样只需要一个完整的页面列表就可以了。随便找一个可以输出子命名空间的插件，新建一个页面用于从根命名空间展开就 OK 啦。</p><p>请求这个列表页面的 XHTML body 输出，使用 <code>cheerio</code> 遍历所有的 <code>a</code> 标签，就获得了所有要导出的页面地址。分别再去请求这些页面的 XHTML body 输出，做如下处理：</p><ol><li>跟踪所有的 <code>img</code> 标签，下载图片文件并按预定义的路径规则和文件名归档。</li><li><code>sanitize-html</code> 清除所有不必要的标签、样式、id 和 class。</li><li><code>sanitize-html</code> 按预定义的路径规则更新所有 <code>a</code> 和 <code>img</code> 标签属性。</li></ol><p><a href="https://github.com/phoenixlzx/dokuwiki-exporter/blob/master/exporter.js">看代码</a></p><p>后来发现 DokuWiki 的性能不足以支撑异步请求的速度，额外加上了 <code>sleep</code> 模块来控制请求频率（扶额。</p><p>脚本执行完后，将图片目录移动到 BookStackApp 的对应位置，便可以直接读取所有的 HTML 文件来导入数据啦。</p><p>用了这么久，才发现原来还有比 raw HTML 更难以维护的数据格式啊…（望天。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Wiki 这么反人类的语法是怎么存在这么久的？？？？？？？&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>制作 Arch Linux 系统模板镜像</title>
    <link href="https://blog.phoenixlzx.com/2018/02/01/build-archlinux-image-template-for-aliyun/"/>
    <id>https://blog.phoenixlzx.com/2018/02/01/build-archlinux-image-template-for-aliyun/</id>
    <published>2018-02-01T05:09:02.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云镜像制作踩坑记。</p><p>此文章主要记录按照<a href="https://www.alibabacloud.com/help/zh/faq-detail/51138.htm">阿里云 Customized Linux</a> 制作 VPC 镜像的过程。一些部分也可用作制作其他平台镜像的参考。                       </p><p>当然记录的原因主要是 Arch 上的 cloud-init 打死无法在阿里云上修改 root 密码，就很气。</p><a id="more"></a><h3 id="建立虚拟机"><a href="#建立虚拟机" class="headerlink" title="建立虚拟机"></a>建立虚拟机</h3><p>因为要制作 Customized Linux，所以第一步无法在阿里云平台上使用公共镜像制作。本机启动一个 Virtual Box，新建虚拟机，虚拟磁盘选择 RAW/IMG 格式即可。</p><p>按照一般步骤安装 Arch Linux，需要整个磁盘仅有一个分区。虽然很多平台支持多分区的镜像文件，但是莫名在这里踩了坑所以。</p><p>（另外吐槽：vps2arch 居然不帮我把 <code>base-devel</code> 装全了？！）</p><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>安装一些必需的包。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pacman -S qemu-guest-ga openssh</span></span><br></pre></td></tr></table></figure><p>启用服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> qemu-ga</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> sshd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> systemd-networkd</span></span><br></pre></td></tr></table></figure><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>哪个魂淡跟我讲 VPC 是 DHCP？装着 cloud-init 的 Arch 就可以自动设置内网 IP，这个没装的就 GG。</p><p>修改文件 <code>/etc/systemd/network/default.network</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Match]</span></span><br><span class="line"><span class="attr">Name</span>=en*</span><br><span class="line"></span><br><span class="line"><span class="section">[Network]</span></span><br><span class="line"><span class="attr">DHCP</span>=ipv4</span><br></pre></td></tr></table></figure><p>总之先这样放着。</p><h4 id="定制脚本"><a href="#定制脚本" class="headerlink" title="定制脚本"></a>定制脚本</h4><p>根据阿里云的文档，cloud init 不生效的时候需要用约定好的配置文件和脚本完成各种兼容动作。</p><p>新建目录 <code>/aliyun_custom_image</code></p><p>新建文件 <code>/usr/bin/aliyun-custom-os</code>，写入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">os_conf_dir=/aliyun_custom_image</span><br><span class="line">os_conf_file=<span class="variable">$&#123;os_conf_dir&#125;</span>/os.conf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">load_os_conf</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [[ -f <span class="variable">$os_conf_file</span> ]]; <span class="keyword">then</span></span><br><span class="line">        . <span class="variable">$os_conf_file</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$password</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">cleanup</span></span>() &#123;</span><br><span class="line">    <span class="comment"># ensure $os_conf_file is deleted, to avoid repeating config system</span></span><br><span class="line">    rm <span class="variable">$os_conf_file</span> &gt;&amp; /dev/null</span><br><span class="line">    <span class="comment"># ensure $os_conf_dir is exitst</span></span><br><span class="line">    mkdir -p <span class="variable">$os_conf_dir</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">config_password</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$password</span> ]]; <span class="keyword">then</span></span><br><span class="line">        password=$(<span class="built_in">echo</span> <span class="variable">$password</span> | base64 -d)</span><br><span class="line">        <span class="keyword">if</span> [[ $? == 0 &amp;&amp; -n <span class="variable">$password</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;root:<span class="variable">$password</span>&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;root:<span class="variable">$password</span>&quot;</span> | chpasswd</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">config_hostname</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$hostname</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$hostname</span>&quot;</span> &gt; /etc/hostname</span><br><span class="line">        hostnamectl set-hostname <span class="variable">$hostname</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">config_network</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$eth0_ip_addr</span> ]]; <span class="keyword">then</span></span><br><span class="line">        config_interface</span><br><span class="line">        systemctl restart systemd-networkd</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">config_interface</span></span>() &#123;</span><br><span class="line">    mask2cdr <span class="variable">$eth0_netmask</span></span><br><span class="line">    cat &lt;&lt; EOF &gt; /etc/systemd/network/default.network</span><br><span class="line"><span class="comment"># Generated by Aliyun Custom OS helper</span></span><br><span class="line"><span class="comment"># DO NOT EDIT THIS FILE! IT WILL BE OVERWRITTEN</span></span><br><span class="line"></span><br><span class="line">[Match]</span><br><span class="line">Name=$(ip link | awk -F: <span class="string">&#x27;$0 !~ &quot;lo|vir|wl|^[^0-9]&quot;&#123;print $2a;getline&#125;&#x27;</span> | sed -e <span class="string">&#x27;s/^[[:space:]]*//&#x27;</span>)</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">Address=<span class="variable">$eth0_ip_addr</span>/<span class="variable">$netmask</span></span><br><span class="line">Gateway=<span class="variable">$eth0_gateway</span></span><br><span class="line"></span><br><span class="line">[Link]</span><br><span class="line">MACAddress=<span class="variable">$eth0_mac_address</span></span><br><span class="line"></span><br><span class="line">[Address]</span><br><span class="line">Address=<span class="variable">$eth0_ip_addr</span>/<span class="variable">$netmask</span></span><br><span class="line">EOF</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;nameserver 1.1.1.1&quot;</span> &gt; /etc/resolv.conf</span><br><span class="line">    <span class="keyword">for</span> ns <span class="keyword">in</span> <span class="variable">$dns_nameserver</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;nameserver <span class="variable">$ns</span>&quot;</span> &gt;&gt; /etc/resolv.conf</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mask2cdr</span></span>() &#123;</span><br><span class="line">    <span class="comment"># Assumes there&#x27;s no &quot;255.&quot; after a non-255 byte in the mask</span></span><br><span class="line">    <span class="built_in">local</span> x=<span class="variable">$&#123;1##*255.&#125;</span></span><br><span class="line">    <span class="built_in">set</span> -- 0^^^128^192^224^240^248^252^254^ $(( (<span class="variable">$&#123;#1&#125;</span> - <span class="variable">$&#123;#x&#125;</span>)*<span class="number">2</span> )) <span class="variable">$&#123;x%%.*&#125;</span></span><br><span class="line">    x=<span class="variable">$&#123;1%%$3*&#125;</span></span><br><span class="line">    netmask=$(( <span class="variable">$2</span> + (<span class="variable">$&#123;#x&#125;</span>/<span class="number">4</span>) ))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> load_os_conf ; <span class="keyword">then</span></span><br><span class="line">    config_password</span><br><span class="line">    config_hostname</span><br><span class="line">    config_network</span><br><span class="line">    cleanup</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;not load <span class="variable">$os_conf_file</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>赋予执行权限</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x <span class="regexp">/usr/</span>bin/aliyun-custom-os</span><br></pre></td></tr></table></figure><p>新建 systemd unit 文件 <code>/usr/lib/systemd/system/aliyun-custom-os.service</code> 写入内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"><span class="attribute">Description</span>=Aliyun Custom OS Helper Script</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="attribute">Type</span>=oneshot</span><br><span class="line"><span class="attribute">ExecStart</span>=/usr/bin/aliyun-custom-os</span><br><span class="line"><span class="attribute">TimeoutSec</span>=30</span><br><span class="line"><span class="attribute">StandardInput</span>=tty</span><br><span class="line"><span class="attribute">RemainAfterExit</span>=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"><span class="attribute">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>然后启用这个服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> aliyun-custom-os</span><br></pre></td></tr></table></figure><h4 id="挂载镜像"><a href="#挂载镜像" class="headerlink" title="挂载镜像"></a>挂载镜像</h4><p>正常 shutdown 虚拟机，然后拿到镜像文件的路径。例如 <code>~/vm/archlinux.img</code>。</p><p>接下来需要将此镜像挂载到宿主机系统中修改、清理文件。首先确定镜像文件中的分区位置：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file ~/vm/archlinux.img</span><br><span class="line">archlinux.img: x86 boot sector; partition <span class="number">1</span>: ID=<span class="number">0x83</span>, active, starthead <span class="number">32</span>, startsector <span class="number">2048</span>, <span class="number">41938944</span> sectors, code offset <span class="number">0x63</span></span><br></pre></td></tr></table></figure><p>得知 <code>startsector</code> 为 <code>2048</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">fdisk</span> <span class="string">-l</span> <span class="string">~/vm/archlinux.img</span></span><br><span class="line"><span class="string">You</span> <span class="string">must</span> <span class="string">set</span> <span class="string">cylinders.</span></span><br><span class="line"><span class="string">You</span> <span class="string">can</span> <span class="string">do</span> <span class="string">this</span> <span class="string">from</span> <span class="string">the</span> <span class="string">extra</span> <span class="string">functions</span> <span class="string">menu.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Disk archlinux.img:</span> <span class="number">0</span> <span class="string">MB,</span> <span class="number">0</span> <span class="string">bytes</span></span><br><span class="line"><span class="number">255</span> <span class="string">heads,</span> <span class="number">63</span> <span class="string">sectors/track,</span> <span class="number">0</span> <span class="string">cylinders</span></span><br><span class="line"><span class="string">Units</span> <span class="string">=</span> <span class="string">cylinders</span> <span class="string">of</span> <span class="number">16065</span> <span class="string">*</span> <span class="number">512</span> <span class="string">=</span> <span class="number">8225280</span> <span class="string">bytes</span></span><br><span class="line"><span class="string">Sector</span> <span class="string">size</span> <span class="string">(logical/physical):</span> <span class="number">512</span> <span class="string">bytes</span> <span class="string">/</span> <span class="number">512</span> <span class="string">bytes</span></span><br><span class="line"><span class="string">I/O</span> <span class="string">size</span> <span class="string">(minimum/optimal):</span> <span class="number">512</span> <span class="string">bytes</span> <span class="string">/</span> <span class="number">512</span> <span class="string">bytes</span></span><br><span class="line"><span class="attr">Disk identifier:</span> <span class="number">0x91d8e293</span></span><br><span class="line"></span><br><span class="line">        <span class="string">Device</span> <span class="string">Boot</span>      <span class="string">Start</span>         <span class="string">End</span>      <span class="string">Blocks</span>   <span class="string">Id</span>  <span class="string">System</span></span><br><span class="line"><span class="string">archlinux.img1</span>   <span class="string">*</span>           <span class="number">1</span>        <span class="number">2611    </span><span class="number">20969472</span>   <span class="number">83</span>  <span class="string">Linux</span></span><br><span class="line"><span class="attr">Partition 1 has different physical/logical endings:</span></span><br><span class="line">     <span class="string">phys=(1023,</span> <span class="number">254</span><span class="string">,</span> <span class="number">63</span><span class="string">)</span> <span class="string">logical=(2610,</span> <span class="number">180</span><span class="string">,</span> <span class="number">2</span><span class="string">)</span></span><br></pre></td></tr></table></figure><p>得知 <code>sectorsize</code> 为 <code>512</code>。</p><p>使用 <code>mount</code> 命令带 offset 参数挂载镜像中的分区：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p <span class="regexp">/mnt/img</span></span><br><span class="line">$ sudo mount -t ext4 -o loop,offset=$((<span class="number">2048</span>*<span class="number">512</span>)) <span class="regexp">/path/</span>to<span class="regexp">/archlinux.img /m</span>nt<span class="regexp">/img/</span> <span class="comment"># 更改 -t auto 或者其他此分区使用的文件系统格式</span></span><br></pre></td></tr></table></figure><p>就可以 <code>cd /mnt/img</code> 看到镜像里的 rootfs 啦。</p><h4 id="清理-检查文件"><a href="#清理-检查文件" class="headerlink" title="清理/检查文件"></a>清理/检查文件</h4><p>要删除的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm /root/.bash_history <span class="comment"># _(:з」∠)_</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm /etc/ssh/ssh_host_* <span class="comment"># 强制每次部署的时候重新生成密钥对</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -r /var/<span class="built_in">log</span>/* <span class="comment"># 清理不需要的日志</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -r /var/cache/* <span class="comment"># 清理缓存</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm /etc/resolv.conf.bak <span class="comment"># 避免恢复成制作时的 DNS</span></span></span><br></pre></td></tr></table></figure><p>要检查的：</p><p><code>/etc/hosts</code> - 我不知道为什么，第一次的时候把这个文件留空了<em>(:з」∠)</em></p><p><code>/etc/resolv.conf</code> - 鉴于总是有人喜欢手动修改这个文件，所以直接把它写成静态文件好了。内容例如</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">nameserver <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p><code>/etc/ssh/sshd_config</code> 中是否允许 root 密码登陆。</p><h3 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h3><p>退出 <code>/mnt/img</code> 目录，然后卸载镜像</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># umount <span class="regexp">/mnt/img</span></span><br></pre></td></tr></table></figure><p>（可选）使用 <code>qemu-img</code> 转换镜像格式到 VHD，减少镜像文件大小。特别是对国内的小水管上传（心疼</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-img convert -f<span class="built_in"> raw </span>-O vpc archlinux.img archlinux.vhd</span><br></pre></td></tr></table></figure><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><p>在相同的 region 创建一个 OSS bucket，然后创建一个 RAM 子用户赋予 OSS 写权限并创建 Access Key，使用 <a href="https://github.com/aliyun/oss-browser">OSSBrowser</a> 上传准备好的 VHD 文件。</p><p>上传完毕后，在 ECS 标签下的镜像标签即可导入镜像。如果是第一次操作，需要给 ECS 授权访问 OSS。在导入的页面提示中提供了授权的链接。镜像内容配置如下：</p><ul><li>OSS Object 地址：镜像文件在 OSS 中的 URL</li><li>Image 名称：<code>archlinux-2018.1-x86_64</code> … 等符合要求即可</li><li>操作系统：Linux</li><li>系统盘大小：40GB</li><li>系统架构：x86_64</li><li>系统平台：Customized Linux</li><li>镜像格式：VHD（如果是 img 就选 RAW）</li><li>镜像描述：随便写啦。</li></ul><p>确定后应该就会开始制作镜像了。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>因为没有做经典实例的兼容，这个镜像只能用于 VPC 的实例。总体而言，cloud-init 本来兼容的 Arch 却无法更改 root 密码（其他的倒是没问题），所以才选择了用一个 dirty 的方案来实现。</p><p>不知道应该说阿里云的工程师对自定义镜像的考虑周到还是对不同发行版的考虑欠妥…？</p><p>最后庆幸倒腾来去上传了好多遍 20G 的文件，日本运营商家宽带宽对等真的是帮了大忙，不然一个镜像制作不知道要到什么时候 &gt; &gt; （斜眼看国内三大运营商</p><p>参考：</p><ul><li><a href="https://www.alibabacloud.com/help/zh/faq-detail/51138.htm">https://www.alibabacloud.com/help/zh/faq-detail/51138.htm</a></li><li><a href="https://serverfault.com/questions/842964/bash-script-to-retrieve-name-of-ethernet-network-interface">https://serverfault.com/questions/842964/bash-script-to-retrieve-name-of-ethernet-network-interface</a></li><li><a href="https://wiki.archlinux.org/index.php/systemd-networkd">https://wiki.archlinux.org/index.php/systemd-networkd</a></li><li><a href="https://stackoverflow.com/questions/20762575/explanation-of-convertor-of-cidr-to-netmask-in-linux-shell-netmask2cdir-and-cdir">https://stackoverflow.com/questions/20762575/explanation-of-convertor-of-cidr-to-netmask-in-linux-shell-netmask2cdir-and-cdir</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;阿里云镜像制作踩坑记。&lt;/p&gt;
&lt;p&gt;此文章主要记录按照&lt;a href=&quot;https://www.alibabacloud.com/help/zh/faq-detail/51138.htm&quot;&gt;阿里云 Customized Linux&lt;/a&gt; 制作 VPC 镜像的过程。一些部分也可用作制作其他平台镜像的参考。                       &lt;/p&gt;
&lt;p&gt;当然记录的原因主要是 Arch 上的 cloud-init 打死无法在阿里云上修改 root 密码，就很气。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>自托管的在线协作翻译平台 Weblate</title>
    <link href="https://blog.phoenixlzx.com/2017/12/28/self-hosted-community-translation-platform-weblate/"/>
    <id>https://blog.phoenixlzx.com/2017/12/28/self-hosted-community-translation-platform-weblate/</id>
    <published>2017-12-27T15:21:07.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p>起因：Transifex 这货闭源一段时间后突然开始抢钱了。</p><p>正巧一堆开源项目需要一个在线协作的翻译平台，于是测试了几个比较知名的开源程序。一遍折腾下来，发现 <a href="https://weblate.org/">Weblate</a> 可以最大化满足要求。顺便提一句，Weblate 也是有 hosted 付费服务的，但是在预算内的源字符串等限制依旧太多，所以选择使用他们的源码来搭建一套。</p><p>以及：我讨厌 Docker。</p><a id="more"></a><p><a href="https://docs.weblate.org/en/latest/">Weblate 文档</a> 提供了非常全面的从起步到上手到各种高级用法的指南，因此这里不多赘述安装的过程。只记录少许踩过的坑。</p><p>这套程序看似简单，但实际上是基于 Django、使用了一大堆组件的复杂程序。如果想保持 system clean，最好（最快）的办法还是使用 Docker。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>小型实例只需要一台虚拟机即可。但是即便只托管几个项目，它依旧会吃掉 2 个 CPU 核心和 4GB 内存，和曾经开源版的 Transifex 有得一拼 <del>大概也解释了为何这类服务都死贵</del>。</p><p>如果是托管在公网上的实例，则推荐使用 HTTPS。Weblate 的 Docker compose 提供了 HTTPS 支持，稍后会提到。</p><p>安装 Git, Docker 和 docker compose，在一些软件仓库中一般是 <code>docker-ce</code> 和 <code>docker-compose</code>，其他软件均不需要手动安装。</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>首先克隆 docker compose 配置到本地</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/WeblateOrg/</span>docker.git weblate-docker</span><br><span class="line">cd weblate-docker</span><br></pre></td></tr></table></figure><p>为了直接开始使用 HTTPS，现在需要先建立域名解析记录，将要使用的域名(例如 <code>weblate.example.com</code>)指向服务器 IP。然后在该目录下创建配置文件 <code>docker-compose-https.override.yml</code> 内容如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  weblate:</span><br><span class="line">    environment:</span><br><span class="line">      - <span class="attribute">WEBLATE_DEBUG</span>=0</span><br><span class="line">      - <span class="attribute">WEBLATE_EMAIL_HOST</span>=smtp.gmail.com</span><br><span class="line">      - <span class="attribute">WEBLATE_EMAIL_HOST_USER</span>=noreply@weblate.org</span><br><span class="line">      - <span class="attribute">WEBLATE_EMAIL_HOST_PASSWORD</span>=system.email.password.here</span><br><span class="line">      - <span class="attribute">WEBLATE_ALLOWED_HOSTS</span>=weblate.example.com</span><br><span class="line">      - <span class="attribute">WEBLATE_SERVER_EMAIL</span>=noreply@weblate.org</span><br><span class="line">      - <span class="attribute">DEFAULT_FROM_EMAIL</span>=noreply@weblate.org</span><br><span class="line">      - <span class="attribute">WEBLATE_REGISTRATION_OPEN</span>=0</span><br><span class="line">      - <span class="attribute">WEBLATE_TIME_ZONE</span>=UTC</span><br><span class="line">      - <span class="attribute">WEBLATE_OFFLOAD_INDEXING</span>=1</span><br><span class="line">      - <span class="attribute">WEBLATE_REQUIRE_LOGIN</span>=1</span><br><span class="line">  - <span class="attribute">WEBLATE_ADMIN_NAME</span>=Weblate Admin</span><br><span class="line">  - <span class="attribute">WEBLATE_ADMIN_EMAIL</span>=admin@weblate.org</span><br><span class="line">  - <span class="attribute">WEBLATE_ADMIN_PASSWORD</span>=your+initial+password</span><br><span class="line">  https-portal:</span><br><span class="line">    environment:</span><br><span class="line">      DOMAINS: <span class="string">&#x27;weblate.example.com -&gt; http://weblate&#x27;</span></span><br></pre></td></tr></table></figure><p>这份配置文件指定了：</p><ul><li>关闭 Django DEBUG mode (即生产模式)</li><li>系统外发邮件服务器 <code>smtp.gmail.com</code></li><li>系统外发邮件用户名 <code>noreply@weblate.org</code></li><li>系统外发邮件密码 <code>system.email.password.here</code></li><li>允许使用的域名 <code>weblate.example.com</code>，如果有多个域名，使用逗号隔开</li><li>系统外发邮件地址 <code>noreply@weblate.org</code></li><li>关闭注册通道，用户必须管理员手动添加</li><li>设置系统时间为 UTC</li><li>打开后台索引，降低运行时的负载</li><li>执行任何操作前要求登陆</li><li>默认管理员名称是 <code>Weblate Admin</code></li><li>默认管理员邮箱地址是 <code>admin@weblate.org</code></li><li>默认管理员密码是 <code>your+initial+password</code></li></ul><p>然后在 https-portal 容器中指定了要使用 SSL 的域名 <code>weblate.example.com</code> 和后端指向的容器 <code>http://weblate</code>。</p><p>在当前目录中执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker-compose</span> <span class="selector-tag">-f</span> <span class="selector-tag">docker-compose-https</span><span class="selector-class">.yml</span> <span class="selector-tag">-f</span> <span class="selector-tag">docker-compose-https</span><span class="selector-class">.override</span><span class="selector-class">.yml</span> <span class="selector-tag">up</span></span><br></pre></td></tr></table></figure><p>会顺序拉取、启动 4 个 docker 容器，分别是：</p><ul><li>https-portal</li><li>weblate</li><li>postgresql</li><li>memcached</li></ul><p>第一次启动需要一些时间拉取镜像并导入初始数据。全部完成后，访问 <code>weblate.example.com</code> 应该可以看到一个 HTTPS 的 Weblate 实例运行，使用之前定义的默认管理员邮箱地址和密码即可登入。</p><p>此时转回终端，按<strong>一次</strong> <code>^C</code> 等待四个容器正确关闭，然后编辑 <code>docker-compose-https.override.yml</code>，删除以下配置</p><ul><li><code>WEBLATE_ADMIN_NAME</code></li><li><code>WEBLATE_ADMIN_EMAIL</code></li><li><code>WEBLATE_ADMIN_PASSWORD</code></li></ul><p>否则，如果更改了默认管理员的信息（如用户名等）下次启动会再次创建管理员帐号，并使用相同的邮箱，导致默认管理员无法使用邮箱登陆（报错返回 2 个用户信息）。解决办法是使用用户名…（摔</p><h2 id="集成配置"><a href="#集成配置" class="headerlink" title="集成配置"></a>集成配置</h2><p>再次运行 <code>docker-compose -f docker-compose-https.yml -f docker-compose-https.override.yml up</code> 后可以很快启动所有需要的程序。此时登入 Weblate 实例，指向 <code>/admin/ssh/</code> 点击创建 SSH 密钥。</p><p>在对单一 repo 提交的情况下，此 SSH Key 可作为 GitHub deploy key，但是如果需要多个不同 repo 提交时，有两种方法：</p><ul><li>创建一个 GitHub 用户，然后将此 SSH Key 添加到此用户下，再给此用户所有必要的写权限</li><li>使用 Access Token 作为 HTTPS 密码访问必要的 repo</li></ul><p>浏览器指向 <code>/admin/trans/project/</code> 新建一个 Project。这个 Project 不仅指一个项目，也可以作为一个 Organization 的存在，更精确的解释是一个软件集，例如 KDE 套件可以包含一大堆的组件。</p><p><img src="/static/img/posts/weblate-1-20171228.jpg" alt="Weblate Project"></p><p>指向 <code>/admin/trans/subproject/</code> 这里才是可以添加要翻译的项目的地方。如果对应的 repo 添加了公钥，这里可以直接使用 SSH 方式的 push URL。</p><p><img src="/static/img/posts/weblate-3-20171228.jpg" alt="Weblate Import strings"></p><p><code>File mask</code> 填写<strong>所有</strong>语言文件相对 repo root 的路径，使用 <code>*</code> 代替语言代号。如果是 Monolingual language file，例如 key 是 <code>user.info.comment_posted</code> 这样而非原本即可阅读的文本，则 <code>Monolingual base language file</code> 和 <code>Base file for new translations</code> 均为源语言文件相对 repo root 的路径，这样即可正确识别源语言的字符串<del>不至于让别人拿着 <code>comment_posted</code> 这样的 key 来猜意思</del></p><p><img src="/static/img/posts/weblate-2-20171228.jpg" alt="Weblate Translation Interface"></p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>提交翻译后，Weblate 会在后台完成索引并提交必要的更改。当然也会一不小心刷了别人的屏…</p><p><img src="/static/img/posts/weblate-4-20171228.jpg" alt="Weblate continous translation"></p><p>在 repo 的 settings -&gt; integration 中可以添加 Weblate 作为集成，每次有新的提交即可触发 Weblate 更新源语言文件。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我很开心可以<a href="https://www.transifex.com/pricing/">省下每年数千美元来用一个非常卡的在线协作翻译平台</a>。</p><p>当然，我依旧讨厌 Docker。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因：Transifex 这货闭源一段时间后突然开始抢钱了。&lt;/p&gt;
&lt;p&gt;正巧一堆开源项目需要一个在线协作的翻译平台，于是测试了几个比较知名的开源程序。一遍折腾下来，发现 &lt;a href=&quot;https://weblate.org/&quot;&gt;Weblate&lt;/a&gt; 可以最大化满足要求。顺便提一句，Weblate 也是有 hosted 付费服务的，但是在预算内的源字符串等限制依旧太多，所以选择使用他们的源码来搭建一套。&lt;/p&gt;
&lt;p&gt;以及：我讨厌 Docker。&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="https://blog.phoenixlzx.com/categories/Notes/"/>
    
    
    <category term="Weblate" scheme="https://blog.phoenixlzx.com/tags/Weblate/"/>
    
    <category term="l10n" scheme="https://blog.phoenixlzx.com/tags/l10n/"/>
    
    <category term="Translation" scheme="https://blog.phoenixlzx.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title>使用 Blender 渲染 Minecraft 3D 效果图</title>
    <link href="https://blog.phoenixlzx.com/2017/12/18/minecraft-3d-render-with-blender/"/>
    <id>https://blog.phoenixlzx.com/2017/12/18/minecraft-3d-render-with-blender/</id>
    <published>2017-12-18T05:11:06.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p>突发奇想渲染 Minecraft 3D 效果图，首先用 Chunky 尝试了一下发现效果虽好但：</p><ul><li>人物动作过于限制</li><li>渲染太！慢！了！</li></ul><p>然而并买不起 Cinema 4D，所以来尝试一下 Blender 啦~</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>比较好的显卡。我的家用游戏机是 NVIDIA GTX 1080Ti，Cycles Render 可以 offload 掉绝大部分 CPU 的压力。</li><li>安装 <a href="https://www.blender.org/">Blender</a>。</li><li>下载 <a href="http://www.jmc2obj.net/">jmc2obj</a>。</li><li>下载 <a href="http://theduckcow.com/dev/blender/mcprep/">MCPrep</a>。</li><li>准备地图、材质、玩家皮肤等资源。</li></ul><h4 id="导出地图文件到-obj"><a href="#导出地图文件到-obj" class="headerlink" title="导出地图文件到 obj"></a>导出地图文件到 obj</h4><p>启动 jmc2obj，在最上方选择地图存档位置并单击 load。在 UI 里选择要导出的地图部分，点击 Export。在左侧的选项中依次：</p><ol><li>Map Scale = 1.0</li><li>Center 选中，否则可能会出现在距离地图很远的地方</li><li>Texture Export<ul><li>Pre-scale textures - 如果是原版材质，建议设置为 4x。如果是高清材质，按需要选择即可。</li><li><strong>不勾选</strong> Export alpha channel in separate file(s)</li><li><strong>不勾选</strong> Export all textures in a single file</li><li>选择从 Minecraft 安装里导出默认材质，或自行选择一个额外的材质包。</li><li>然后选择材质的导出位置。建议在目标目录中新建一个 <code>textures</code> 目录，然后导出到此目录中。此目录里面会出现一个 <code>tex</code> 目录，包含所有的材质文件。</li></ul></li></ol><p>材质导出进度完成后，开始导出地图文件。在右侧的选项中依次：</p><ol><li>取消所有的选项勾选</li><li>勾选 Create a separate object for each material</li><li>可选勾选：<ul><li>Render Entities</li><li>Occulude different adjacent materials</li><li>Optimize mesh</li><li>Do not allow duplicate vertexes</li></ul></li><li>其余选项均保持非勾选状态</li><li>点击 Export 导出到之前创建的 <code>textures</code> 的 <strong>同级目录</strong></li><li>可能会遇到 banner 找不到材质的问题，忽略继续。导出后<strong>还不能使用</strong>，需要一个简单而 ugly 的 hack - 再导出一遍覆盖之前的 obj 和 mtl 文件。</li></ol><p>导出后的工作目录如下：</p><p><img src="/static/img/posts/blender-cwd-20171218.jpg" alt="Blender Working Directory"></p><p>.obj 文件是地图数据，.mtl 则是刚才导出材质的材质索引，指向 <code>textures/tex</code> 的相对路径，因此这些文件的相对位置不能改变。</p><h4 id="安装-MCPrep"><a href="#安装-MCPrep" class="headerlink" title="安装 MCPrep"></a>安装 MCPrep</h4><p>启动 Blender，在 File -&gt; User Preferences -&gt; Add-ons 里，选择 <code>Install Add-on from File...</code></p><p>然后点击下载好的 MCPrep 的 .zip 文件即可。</p><h2 id="导入-blender"><a href="#导入-blender" class="headerlink" title="导入 blender"></a>导入 blender</h2><p>启动 Blender，先删掉默认的 object 和 lamp，然后依次选择 File -&gt; Import -&gt; Wavefront (.obj)</p><p>选择刚才生成的 .obj 文件导入。</p><p><em>（大概会卡一会儿… 喝杯茶先）</em></p><p>导入完成后，首先需要设置材质。选中所有 object （快捷键 A，如果被反选则再摁一次即可），左侧标签页切换到 MCPrep，然后点击 Prep Materials。</p><p><img src="/static/img/posts/prep-materials-20171218.jpg" alt="Prep Materials"></p><p>进入 Walk Navigation 模式（或者其他熟悉的移动模式），Add -&gt; lamp -&gt; Sun 然后将添加的 Sun 光源移动到地图的合适位置（比如一个边角）。</p><p><img src="/static/img/posts/walk-navigation-20171218.jpg" alt="Walk Navigation"></p><p>然后移动 Viewport 到合适的位置，将默认的 Camera 对齐到当前视角。快捷键 <code>Ctrl+Alt+0</code></p><p><img src="/static/img/posts/align-camera-view-20171218.jpg" alt="Align Camera to View"></p><h4 id="设置背景"><a href="#设置背景" class="headerlink" title="设置背景"></a>设置背景</h4><p>在 Blender 的上方菜单栏中，有 Blender Render 和 Cycles Render 两个选项。</p><p>如果使用 Blender Render，则需要在 Sun 的属性里设置 Sky &amp; Atmosphere 并设置 Ray Shadow 以使光源和阴影正确对应。</p><p>如果使用 Cycles Render，则在 World 属性中设置 background 为 Sky Texture。</p><p><img src="/static/img/posts/world-sky-texture-20171218.jpg" alt="Sky texture"></p><p>当然也可以使用自己的天空图像或其他材质。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>在渲染属性中设置使用 CPU 或者 GPU 渲染图像，并可以设置分辨率等。</p><p><img src="/static/img/posts/render-properties-20171218.jpg" alt="Render Properties"></p><p>修改好设置，在 Blender 上方菜单栏中点击 Render -&gt; Render Image 即可开始渲染啦~</p><h4 id="玩家和实体"><a href="#玩家和实体" class="headerlink" title="玩家和实体"></a>玩家和实体</h4><p>我相信熟练使用 C4D/Maya/Blender 的玩家们不需要看这篇教程… 所以玩家实体的高级用法不多讲。</p><p>需要的材料是一份玩家或者其他实体的 Rig，在 PlanetMinecraft 或者 MinecraftForum 上有很多。贴上皮肤就可以用啦。</p><p>在 player rig 中调整好 pose，保存。在要渲染的世界工程里，选择 File -&gt; Append，然后选择刚才的玩家 pose 的 blender 文件，进入后选择 Scene 并 append。</p><p><em>选择 Scene 的原因是有不少 rig 并不是一个单一 object，如果是单一 object，则可以直接导入 object。</em></p><p>在右上方的 object 列表中选择刚才 append 的 scene，定位玩家实体并全部选中 -&gt; Ctrl+C 复制 -&gt; 返回渲染世界 -&gt; Ctrl+V 粘贴。</p><p>选择粘贴进来的玩家实体，然后调整到合适的位置。</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>这大概是我第一次玩 blender。</p><p>总之以下是成果啦。</p><p>比如某玩家的 pose 效果图：</p><p><img src="/static/img/posts/pose-leeder-20171218.jpg" alt="leeder&#39;s pose"></p><p>比 chunky 的动作自然多了吧~</p><p>最后是完成的效果：</p><p><img src="/static/files/xport1.1080.jpg" alt="Project xport"></p><p>Happy Rendering~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;突发奇想渲染 Minecraft 3D 效果图，首先用 Chunky 尝试了一下发现效果虽好但：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人物动作过于限制&lt;/li&gt;
&lt;li&gt;渲染太！慢！了！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而并买不起 Cinema 4D，所以来尝试一下 Blender 啦~&lt;/p&gt;</summary>
    
    
    
    <category term="Minecraft" scheme="https://blog.phoenixlzx.com/categories/Minecraft/"/>
    
    
    <category term="Minecraft" scheme="https://blog.phoenixlzx.com/tags/Minecraft/"/>
    
    <category term="Blender" scheme="https://blog.phoenixlzx.com/tags/Blender/"/>
    
    <category term="3D" scheme="https://blog.phoenixlzx.com/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>NetFLOW / sFLOW 流量报告：FastNetMon + InfluxDB + Grafana</title>
    <link href="https://blog.phoenixlzx.com/2017/06/06/netflow-sflow-graph-fastnetmon-influxdb-grafana/"/>
    <id>https://blog.phoenixlzx.com/2017/06/06/netflow-sflow-graph-fastnetmon-influxdb-grafana/</id>
    <published>2017-06-05T21:57:38.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p>最近稍微有点时间折腾了下 Cisco 的三层交换，尝试搭建了一套数据中心用的流量统计/监控/报告系统。过程不是很复杂，但是也只算利用了一套高级软件组合的一点点功能。之后打算继续研究更多的功能实现，不过也要看有没有时间了…</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先确认出口路由设备支持 netflow/sflow 的对应版本。一般 Cisco 的路由器或者三层交换都是支持的。</p><p>然后准备一个常见的 Linux 系统，虚拟机或者物理机都可以。</p><p>出口路由设备能够连通到该 Linux 系统，并且 flow collector 设置到该 Linux 系统的 IP 地址和对应端口。</p><h2 id="FastNetMon"><a href="#FastNetMon" class="headerlink" title="FastNetMon"></a>FastNetMon</h2><p><a href="https://fastnetmon.com/install/">安装</a> fastnetmon，只需要一条简单的脚本命令。</p><p>然后将所有要监控的网段加入 <code>/etc/networks_list</code>。一行一个，例如：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10.1.0.0</span>/<span class="number">16</span></span><br><span class="line"><span class="number">192.168.254.0</span>/<span class="number">24</span></span><br><span class="line"><span class="number">8.8.0.0</span>/<span class="number">16</span></span><br></pre></td></tr></table></figure><p>按照安装文档打开两个终端，分别启动主进程和客户端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>fastnetmon/fastnetmon</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>fastnetmon/fastnetmon_client</span><br></pre></td></tr></table></figure><p>如果没有问题，应该在客户端上可以看到收到的 flow 数据。</p><p>先关闭 fastnetmon 进程，修改配置文件打开 Graphite 支持：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">graphite</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">graphite_host</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">graphite_port</span> = <span class="number">2003</span></span><br><span class="line"><span class="attr">graphite_prefix</span> = fastnetmon</span><br></pre></td></tr></table></figure><p>=== 2018-07-26 更新 ===</p><p>如果有比较新的发行版（内核 &gt;= 3.6）可以开启 <code>AF_PACKET</code>，安装并启动 <code>irqbalance</code> 来获得更好的抓包性能。</p><h2 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h2><p><a href="https://portal.influxdata.com/downloads">安装</a> InfluxDB，官方提供了各种包管理器的安装方式。</p><p>配置文件一般位于 <code>/etc/influxdb/influxdb.conf</code>，需要根据环境做安全相关设置（侦听地址、端口、鉴权、etc）并打开 Graphite Simulation</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[[graphite]]</span></span><br><span class="line">  <span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">bind-address</span> = <span class="string">&quot;127.0.0.1:2003&quot;</span></span><br><span class="line">  <span class="attr">database</span> = <span class="string">&quot;flow_dc1&quot;</span></span><br><span class="line">  <span class="attr">protocol</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">  <span class="attr">consistency-level</span> = <span class="string">&quot;one&quot;</span></span><br><span class="line">  <span class="attr">name-separator</span> = <span class="string">&quot;.&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># batch-size / batch-timeout requires InfluxDB &gt;= 0.9.3</span></span><br><span class="line">  <span class="attr">batch-size</span> = <span class="number">5000</span> <span class="comment"># will flush if this many points get buffered</span></span><br><span class="line">  <span class="attr">batch-timeout</span> = <span class="string">&quot;1s&quot;</span> <span class="comment"># will flush at least this often even if we haven&#x27;t hit buffer limit</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">templates</span> = [</span><br><span class="line">    <span class="string">&quot;fastnetmon.hosts.* app.measurement.cidr.direction.function.resource&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fastnetmon.networks.* app.measurement.cidr.direction.resource&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fastnetmon.total.* app.measurement.direction.resource&quot;</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>顺序重启 InfluxDB 和 fastnetmon。检查 flow 数据是否记录到 InfluxDB:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ influx</span><br><span class="line">Connected <span class="keyword">to</span> http://localhost:<span class="number">8086</span> <span class="keyword">version</span> <span class="number">1.2</span><span class="number">.4</span></span><br><span class="line">InfluxDB shell <span class="keyword">version</span>: <span class="number">1.2</span><span class="number">.4</span></span><br><span class="line">&gt; use flow_dc1</span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">database</span> flow_dc1</span><br><span class="line">&gt; <span class="keyword">select</span> mean(<span class="keyword">value</span>) <span class="keyword">from</span> networks <span class="keyword">where</span> direction = <span class="string">&#x27;incoming&#x27;</span> <span class="keyword">and</span> resource = <span class="string">&#x27;bps&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> *</span><br><span class="line"><span class="type">name</span>: networks</span><br><span class="line">tags: app=fastnetmon, <span class="type">cidr</span>=<span class="number">10</span>_1_0_0_24, direction=incoming, resource=bps</span><br><span class="line"><span class="type">time</span> mean</span><br><span class="line"><span class="comment">---- ----</span></span><br><span class="line"><span class="number">0</span>    <span class="number">4735.049632696411</span></span><br></pre></td></tr></table></figure><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><p>Grafana 是一款非常强大且易用的数据可视化工具。<a href="https://grafana.com/grafana/download">安装</a> Grafana 然后修改配置文件的必要部分，配置文件一般位于 <code>/etc/grafana/grafana.ini</code>。</p><p>完成后重启 Grafana，将浏览器指向 Grafana 的 HTTP 服务器地址即可看到登录界面。如果内部使用的话，建议关闭匿名访问和注册功能。</p><p>使用默认的 <code>admin</code> / <code>admin</code> 登录，按照引导完成配置、添加数据源（Data source），数据源即是 InfluxDB 的 HTTP API 地址。如果 Grafana 中限制了数据源白名单，需要将 InfluxDB 的 HTTP API 地址和端口加到白名单里。</p><p>添加面板、Graph，在 Graph 编辑模式里写入类似这样的查询语句：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT mean(<span class="string">&quot;value&quot;</span>) <span class="keyword">FROM</span> <span class="string">&quot;networks&quot;</span> WHERE <span class="string">&quot;direction&quot;</span> = <span class="string">&#x27;incoming&#x27;</span> <span class="keyword">AND</span> <span class="string">&quot;resource&quot;</span> = <span class="string">&#x27;bps&#x27;</span> <span class="keyword">AND</span> <span class="string">&quot;cidr&quot;</span> =~ /^10_1_0_0_16/ <span class="keyword">AND</span> <span class="variable">$timeFilter</span><span class="built_in"> GROUP </span>BY time(<span class="variable">$interval</span>) fill(previous)</span><br></pre></td></tr></table></figure><p>即可看到有图表出现。根据需求完善查询语句和图表配置即可简单实现各种可视化效果。例如流量和数据包的实时报告：</p><p><img src="/static/img/posts/2017-06-06-grafana-1.jpg" alt="Traffic Graph"></p><p><img src="/static/img/posts/2017-06-06-grafana-2.jpg" alt="PPS Graph"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过配合 FastNetMon，InfluxDB 和 Grafana 即可快速实现一套基于 NetFLOW / sFLOW 的流量统计报告系统。但是 FastNetMon 的功能远不止流量统计，Grafana 也有大量插件和灵活的用法可以满足更多需求。如果配置合理，此方案也可适用于 40Gbps+ 接入的中型数据中心且成本低廉。以及——</p><ol><li>InfluxDB 真的很快！</li><li>Grafana 的图表真的很省资源！</li><li>Chronograph 卡死了我的浏览器！（i7-7700K / Chrome）</li></ol><p><del>以及一大早手工修好了 K812 的耳机线，省掉了 2 万日元的线材费用非常开心</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近稍微有点时间折腾了下 Cisco 的三层交换，尝试搭建了一套数据中心用的流量统计/监控/报告系统。过程不是很复杂，但是也只算利用了一套高级软件组合的一点点功能。之后打算继续研究更多的功能实现，不过也要看有没有时间了…&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="https://blog.phoenixlzx.com/categories/Notes/"/>
    
    
    <category term="netflow" scheme="https://blog.phoenixlzx.com/tags/netflow/"/>
    
    <category term="sflow" scheme="https://blog.phoenixlzx.com/tags/sflow/"/>
    
    <category term="fastnetmon" scheme="https://blog.phoenixlzx.com/tags/fastnetmon/"/>
    
    <category term="influxdb" scheme="https://blog.phoenixlzx.com/tags/influxdb/"/>
    
    <category term="grafana" scheme="https://blog.phoenixlzx.com/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>不作死就不会死系列，TFTP 修复变砖的 Nighthawk X6</title>
    <link href="https://blog.phoenixlzx.com/2017/05/13/recover-netgear-nighthawk-x6-with-tftp/"/>
    <id>https://blog.phoenixlzx.com/2017/05/13/recover-netgear-nighthawk-x6-with-tftp/</id>
    <published>2017-05-13T03:13:04.000Z</published>
    <updated>2020-09-14T04:20:19.882Z</updated>
    
    <content type="html"><![CDATA[<p>由于之前买的 AC87U 经常被 roommate 抱怨掉线（风评表示这货 5G 有问题，然而我连着 5G 毛事儿没有，隔壁用 2.4G 却一直掉线）…</p><p>新购入的路由器是 Netgear Nighthawk X6 R8000。</p><p>由于之前的 Security Advisory，所以到手第一件事就是配上网络更新固件啦。更新挺慢的于是点点点完事儿撸猫去了。过了一会儿回来一看怎么还没网络？得，砖了…</p><a id="more"></a><p>讲道理，Netgear 也算大厂了，这种 online update 干了不知道多少回，第一次遇到这都能变砖的（扶额。</p><p>现象就是电源橙色灯亮后一会儿变成白色灯闪烁，且网络服务没有启动。尝试过 factory reset 无效，官方提供的 TFTP 强刷工具也无效（刷不进…</p><p><a href="https://community.netgear.com/t5/Nighthawk-WiFi-Routers/SOLVED-Steps-for-debrick-unresponsive-R7000-softbricked/td-p/414034">解决方案</a>反而是意想不到的简单。总之大概记录下修复的过程。</p><ol><li>从<a href="https://www.netgear.com/support/">官方网站</a>下载适用的新版固件并解压，应该得到一个 .chk 文件</li><li>关闭路由器电源等待 10 秒，网线插 LAN 口开机。</li><li>检查是否获得了正确的 IP。如果没有，可能 DHCP 服务没起来。手动设置一个正确的 IP 吧。然后能 ping 通路由器 IP 即可。</li><li>电源灯开始闪烁的时候，执行命令 <code>tftp -i [router ip] put [path/to/firmware.chk]</code>。例如 <code>tftp -i 192.168.1.1 put ./R8000-V1.0.3.36_1.1.25.chk</code></li><li>等一会儿路由器自动重启，搞定。</li></ol><p>配置都没丢…然后我依旧没有搞定 OCN 要怎么连 IPv6… 说好的 IPv6 PPPoE 呢…</p><p><img src="/static/img/posts/2017-05-13-sticker.jpg" alt="心累.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于之前买的 AC87U 经常被 roommate 抱怨掉线（风评表示这货 5G 有问题，然而我连着 5G 毛事儿没有，隔壁用 2.4G 却一直掉线）…&lt;/p&gt;
&lt;p&gt;新购入的路由器是 Netgear Nighthawk X6 R8000。&lt;/p&gt;
&lt;p&gt;由于之前的 Security Advisory，所以到手第一件事就是配上网络更新固件啦。更新挺慢的于是点点点完事儿撸猫去了。过了一会儿回来一看怎么还没网络？得，砖了…&lt;/p&gt;</summary>
    
    
    
    <category term="Note" scheme="https://blog.phoenixlzx.com/categories/Note/"/>
    
    
    <category term="Router" scheme="https://blog.phoenixlzx.com/tags/Router/"/>
    
    <category term="TFTP" scheme="https://blog.phoenixlzx.com/tags/TFTP/"/>
    
    <category term="Debrick" scheme="https://blog.phoenixlzx.com/tags/Debrick/"/>
    
  </entry>
  
  <entry>
    <title>Minecraft 服务器资源控制策略：AI 抑制而非数量限制</title>
    <link href="https://blog.phoenixlzx.com/2017/05/05/reduce-minecraft-server-lag-without-limit-mob-amount/"/>
    <id>https://blog.phoenixlzx.com/2017/05/05/reduce-minecraft-server-lag-without-limit-mob-amount/</id>
    <published>2017-05-04T16:42:42.000Z</published>
    <updated>2020-09-14T04:20:19.876Z</updated>
    
    <content type="html"><![CDATA[<p>Minecraft 的 lag 问题已经司空见惯，各种控制资源消耗和卡顿的插件也层出不穷。但是它们几乎都非常用力地在一个点上：控制实体数量。</p><p>这并不无道理，因为 Minecraft 中最消耗资源的部分就是实体。但是暴力控制实体数量会导致刷怪塔无法正常工作、掉落物清理速度过快等问题，在生存服务器中可能引发玩家的强烈不满。</p><p>所以，<a href="https://nyaa.cat/">喵窝</a>开发组从另一个角度做出了一些尝试。</p><a id="more"></a><h3 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h3><p>生物实体的数量巨大，主要集中的地区显然不是野外的自然刷怪区，而是玩家聚集的刷怪场、村民工程、动物养殖场等。如果不限制生物的数量和密度同时降低资源消耗，那么只能从生物实体的特性入手了。</p><p>Minecraft 最近的版本中引用了 <code>NoAI</code> 的 NBT Tag，带有此标签的生物将不会进行 AI 计算。换句话说，除了占用服务器内存中的一点数据，几乎不会对这个生物实体有任何其他的 CPU 算力消耗。</p><p>也就是说，实体消耗的算力资源，绝大部分都是 AI 计算的消耗。</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>抓上一票人做了一些测试，结果证实生物失去 AI 后大幅降低了 CPU 的算力消耗。这是个 positive 的信号，但是接下来的测试则遇到了问题。</p><p>对于养殖场，等生物数量变化不大（或者说只是定期来清理并重新养殖一次）的设施，生物失去 AI 的影响很小，只有在重新繁殖时需要恢复 AI。但是刷怪塔则因为生物没有 AI，同时也被强制不受重力影响而几乎无法使用，即便同时设置 <code>NoGravity</code> 为 <code>false</code> 也无效。</p><p>开发组中 <a href="https://im.librazy.org/">@Librazy</a> 提到了 Spigot 的一个<a href="https://www.spigotmc.org/wiki/spigot-configuration/">参数</a> <code>nerf-spawner-mobs</code>，开启时刷怪笼生成的生物将不会拥有 AI，但是会被外界影响（例如水流和火球等）而移动。这个选项是全局的，因此不需要开启，只需要反射 spigot 中设置该功能的方法即可。</p><p>于是整个方案的流程便是当服务器卡顿时抑制生物密集区的生物 AI 从而降低资源占用，同时最大程度上保证玩家对生物的需求。「服务器卡顿」的考量以服务器 TPS 而非实体数量为准，当服务器 TPS 高于一定值时即认为服务器没有超负荷，不会有任何操作，最大程度上利用硬件的性能。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>插件主要由开发组的 <a href="https://github.com/cyilin">@Cylin</a> 和 <a href="https://github.com/Librazy">@Librazy</a> 编写，源代码以 MIT 协议发布在 <a href="https://github.com/NyaaCat/yasui">GitHub</a> 上。</p><p>插件每隔一段时间扫描服务器的 TPS 确认运行状况，如果 TPS 低于阈值则触发 AI 控制，TPS 高于一定值且持续一段时间即认为服务器已恢复正常运行状态，自动恢复被抑制的实体 AI 减少对生存体验的影响。</p><p>实现过程中额外添加了一些额外可能被生存服务器用到的功能：</p><ul><li>per-world 控制，如果玩家需要建造以仇恨为基础的小黑塔，可以关闭对末地的控制。</li><li>实体总量和单区块实体密度在 AI 抑制时纳入考虑，更加精准抑制资源消耗较高的区块。</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><a href="https://github.com/NyaaCat/yasui">yasui</a> 插件在 <a href="https://craft.moe/">毛玉線圈物語</a> 服务器中应用测试。由于近期玩家数量爆炸式增长（日常在线 5 人到 ~30 人甚至 50 人），各种实体控制插件均告无效。yasui 插件应用后被证实数次发挥作用，没有任何实体数量限制的前提下将服务器 TPS 稳定在 19 以上，服务器实体承载数量从 ~2500 提到至接近 5000，并且还有继续提高的可能（数次触发中最高一次单世界实体记录是 4808，其他世界中仍有大约 2000 实体未被计入）。</p><p><del>吐槽：你们贼能刷</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Minecraft 的 lag 问题已经司空见惯，各种控制资源消耗和卡顿的插件也层出不穷。但是它们几乎都非常用力地在一个点上：控制实体数量。&lt;/p&gt;
&lt;p&gt;这并不无道理，因为 Minecraft 中最消耗资源的部分就是实体。但是暴力控制实体数量会导致刷怪塔无法正常工作、掉落物清理速度过快等问题，在生存服务器中可能引发玩家的强烈不满。&lt;/p&gt;
&lt;p&gt;所以，&lt;a href=&quot;https://nyaa.cat/&quot;&gt;喵窝&lt;/a&gt;开发组从另一个角度做出了一些尝试。&lt;/p&gt;</summary>
    
    
    
    <category term="Minecraft" scheme="https://blog.phoenixlzx.com/categories/Minecraft/"/>
    
    
    <category term="Minecraft" scheme="https://blog.phoenixlzx.com/tags/Minecraft/"/>
    
  </entry>
  
  <entry>
    <title>新轮子：Planet.js</title>
    <link href="https://blog.phoenixlzx.com/2017/02/18/dont-ask-me-why-invent-another-planet-river-of-news/"/>
    <id>https://blog.phoenixlzx.com/2017/02/18/dont-ask-me-why-invent-another-planet-river-of-news/</id>
    <published>2017-02-17T20:01:31.000Z</published>
    <updated>2020-09-14T04:20:19.876Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://bbs.nyaa.cat/d/709">一开始的选择</a>（需要登陆）中纠结使用 Planet 还是博客的时候就已经在关注 Planet 这个东西。</p><p>非常奇特，本身并不存储什么数据，但是用这样一个简单的方式在极低的成本下将大量的用户和内容结合到了一起。</p><p>终于决定要建立一个社区星球的时候，我才发现它连主题模板都不支持响应式<del>才不是我想写个好看点的主题结果折腾一天无果</del>(ノ=Д=)ノ┻━┻</p><p>总之，使用的是 Ubuntu 仓库内的 <code>planet-venus</code> 包，遇到了各种问题…</p><ul><li>莫名其妙无法获取 feed，浏览器访问正常，用 curl 正常</li><li>莫名其妙无法读取 feed 内容，其他 feedparser 均正常</li><li>对文章内使用相对链接的内容无能为力</li><li>模板语言落后，不要跟我说 old fashion</li><li>输出路径一直是 <code>cwd</code>，不知道是不是 feature。但是这导致我的 home 下面到处都是 output 目录</li></ul><p>强迫症犯了。遂决定自己实现一个<del>因为逻辑很简单啊不过就是把 RSS 抓下来排个序再丢出去么</del></p><p>但是到具体的细节，还是有不少需要考量的东西。</p><a id="more"></a><h3 id="压缩和编码"><a href="#压缩和编码" class="headerlink" title="压缩和编码"></a>压缩和编码</h3><p>有些网站打开了 gzip 压缩，有些网站使用了非 UTF-8 编码…只是暴力读取的结果就是页面上一半正常一半乱码。</p><p>好在 <a href="https://github.com/danmactough/node-feedparser">feedparser</a> 给出了使用 <code>zlib</code> 和 <code>iconv</code> 的<a href="https://github.com/danmactough/node-feedparser/blob/master/examples/compressed.js">代码样例</a>，这个问题就迎刃而解啦。</p><h3 id="相对路径和内容安全"><a href="#相对路径和内容安全" class="headerlink" title="相对路径和内容安全"></a>相对路径和内容安全</h3><p>Planet Venus 似乎是会解析处理文章内不带有协议的链接和图片，以使这些资源能够在 planet 的页面中直接通过原地址访问。但是问题在于，planet venus 似乎只是暴力给所有非完整 URL 形式的资源地址都强行加上协议和主机名。于是就出现了这种情况——</p><ul><li>原文地址 <code>http://www.example.com/2017/01/21/example.html</code></li><li>原文中引用的资源 <code>images/1234.jpg</code></li><li>看起来没毛病，但是 Planet Venus 解析过来就是 <code>http://www.example.com/images/1234.jpg</code></li><li>这似乎看起来也没毛病… 然！而！正确的地址是 <code>http://www.example.com/2017/01/21/images/1234.jpg</code></li></ul><p>…呵呵哒。</p><p>先不管为什么会有这么奇怪的资源路径，但是 Feedparser 却可以正确解析到带有跟路径的地址。也就是上面的资源地址，Feedparser 解析完之后就是正确的 <code>/2017/01/21/images/1234.jpg</code>。</p><p>但是只有正确的相对路径还不够，因为 planet 是单独的站点，直接把 HTML 往页面中插，结果就是浏览器会去请求 <code>planet/2017/01/21/images/1234.jpg</code> 然而 planet 的服务器上并不会有这个资源。</p><p>于是这个问题先放着，来看另一个问题。</p><p>聚合的一个特点是，几乎无法控制来源内容的安全性——因为其他的网站服务器都不是自己维护的，其他人能否保证自己的网站不被入侵、被跨站…都是未知数。如果有订阅的网站被入侵挂了马，阅读/订阅聚合 planet 的用户也会中招。</p><p>解决这个问题，常见的办法就是过滤掉不安全的 HTML tag。于是这里引入了 <a href="https://github.com/punkave/sanitize-html">sanitize-html</a>。</p><p>其实我一开始打算用 regex 直接切掉不过还是不够 robust 所以乖乖去找包了… 但是惊喜的是这个包居然可以实现按规则替换！这就顺利解决了之前的问题，可以将 Feedparser 解析得到的路径加上正确的协议和主机地址。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sanitizeHtml</span>(html, &#123;</span><br><span class="line">    <span class="attribute">transformTags</span>: &#123;</span><br><span class="line">        <span class="comment">// restore origin links</span></span><br><span class="line">        <span class="string">&#x27;img&#x27;</span>: function (tagName, attribs) &#123;</span><br><span class="line">            if (attribs &amp;&amp; attribs.src) &#123;</span><br><span class="line">                if (attribs.src.startsWith(<span class="string">&#x27;/&#x27;</span>) &amp;&amp; attribs.src.charAt(<span class="number">1</span>) !== <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// root-relative path, add corresponding host before root</span></span><br><span class="line">                    return &#123;</span><br><span class="line">                        <span class="attribute">tagName</span>: tagName,</span><br><span class="line">                        <span class="attribute">attribs</span>: &#123;</span><br><span class="line">                            <span class="attribute">src</span>: host + attribs.src</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125; else if (attribs.src.startsWith(<span class="string">&#x27;//&#x27;</span>) ||</span><br><span class="line">                    attribs.src.startsWith(<span class="string">&#x27;http://&#x27;</span>) ||</span><br><span class="line">                    attribs.src.startsWith(<span class="string">&#x27;https://&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// absolute path, do nothing</span></span><br><span class="line">                    <span class="selector-tag">return</span> &#123;</span><br><span class="line">                        <span class="attribute">tagName</span>: tagName,</span><br><span class="line">                        <span class="attribute">attribs</span>: attribs</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    <span class="comment">// Feedparser may not correctly recognize this path, try with host/path</span></span><br><span class="line">                    <span class="selector-tag">return</span> &#123;</span><br><span class="line">                        <span class="attribute">tagName</span>: tagName,</span><br><span class="line">                        <span class="attribute">attribs</span>: &#123;</span><br><span class="line">                            <span class="attribute">src</span>: host + <span class="string">&#x27;/&#x27;</span> + attribs.src</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// don&#x27;t miss the default action or it throws exception.</span></span><br><span class="line">            return &#123;</span><br><span class="line">                <span class="attribute">tagName</span>: tagName,</span><br><span class="line">                <span class="attribute">attribs</span>: attribs</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>解决了文章内容相对路径的问题，要过滤特定的标签或者标签属性则是这个包本来就要做的事情了，小菜。</p><p>处理完文章对象之后，用 <code>Array.prototype.sort</code> 带一个 <code>compare function</code> 通过更新日期排序，接下来就可以简单渲染页面和 RSS 文件啦。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>一些不太常见的功能，例如 http proxy 的支持（在特殊的网络环境下可能用到），长文章仅展示 summary 并提示继续阅读，avatar 的支持，模板和输出目录保持和配置文件的相对路径，等。</p><p>然后作为深有体会——</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CSS</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line">AWESOME</span><br></pre></td></tr></table></figure><p>因此打死不写前端的家伙选择直接套用了 YUI Library 的 purecss 框架做一个还算看得过去的模板。至少… 几番折腾之后把响应式和 <code>pre</code> 等难缠的宽度搞定了<del>顺便玩了下 media query</del>。</p><p>于是代码 -&gt; <a href="https://github.com/phoenixlzx/planet.js">GitHub</a></p><p>以及已经在使用的 <a href="https://planet.nyaa.cat/">Planet NyaaCat</a></p><p>从开坑到基本完善大概花了 15 个小时… 果然长时间不写代码手生<del>才不是冻得手打字都变慢了呢</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;a href=&quot;https://bbs.nyaa.cat/d/709&quot;&gt;一开始的选择&lt;/a&gt;（需要登陆）中纠结使用 Planet 还是博客的时候就已经在关注 Planet 这个东西。&lt;/p&gt;
&lt;p&gt;非常奇特，本身并不存储什么数据，但是用这样一个简单的方式在极低的成本下将大量的用户和内容结合到了一起。&lt;/p&gt;
&lt;p&gt;终于决定要建立一个社区星球的时候，我才发现它连主题模板都不支持响应式&lt;del&gt;才不是我想写个好看点的主题结果折腾一天无果&lt;/del&gt;(ノ=Д=)ノ┻━┻&lt;/p&gt;
&lt;p&gt;总之，使用的是 Ubuntu 仓库内的 &lt;code&gt;planet-venus&lt;/code&gt; 包，遇到了各种问题…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;莫名其妙无法获取 feed，浏览器访问正常，用 curl 正常&lt;/li&gt;
&lt;li&gt;莫名其妙无法读取 feed 内容，其他 feedparser 均正常&lt;/li&gt;
&lt;li&gt;对文章内使用相对链接的内容无能为力&lt;/li&gt;
&lt;li&gt;模板语言落后，不要跟我说 old fashion&lt;/li&gt;
&lt;li&gt;输出路径一直是 &lt;code&gt;cwd&lt;/code&gt;，不知道是不是 feature。但是这导致我的 home 下面到处都是 output 目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强迫症犯了。遂决定自己实现一个&lt;del&gt;因为逻辑很简单啊不过就是把 RSS 抓下来排个序再丢出去么&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;但是到具体的细节，还是有不少需要考量的东西。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Node.js" scheme="https://blog.phoenixlzx.com/tags/Node-js/"/>
    
    <category term="RSS" scheme="https://blog.phoenixlzx.com/tags/RSS/"/>
    
    <category term="Feed" scheme="https://blog.phoenixlzx.com/tags/Feed/"/>
    
  </entry>
  
  <entry>
    <title>玩了一下 NGINX RealIP 模块</title>
    <link href="https://blog.phoenixlzx.com/2017/02/08/play-with-nginx-realip-module/"/>
    <id>https://blog.phoenixlzx.com/2017/02/08/play-with-nginx-realip-module/</id>
    <published>2017-02-08T11:11:12.000Z</published>
    <updated>2020-09-14T04:20:19.876Z</updated>
    
    <content type="html"><![CDATA[<p>最近要给网站上 CDN 于是折腾了下在 NGINX 部分获取客户端真实 IP 的方案。</p><p>嘛… 意想不到的简单就是…</p><a id="more"></a><h2 id="安装-realip-模块"><a href="#安装-realip-模块" class="headerlink" title="安装 realip 模块"></a>安装 realip 模块</h2><p>如果是 Debian/Ubuntu 系统，直接安装 <code>nginx-extras</code> 这个包即可。包含了很多有用的模块，不需要再自己编译。</p><p>如果是其他发行版，且没有提供额外模块的包的话，需要自己编译 NGINX。编译参数加 <code>--with-http_realip_module</code> 即可。</p><h2 id="获得前端服务器地址"><a href="#获得前端服务器地址" class="headerlink" title="获得前端服务器地址"></a>获得前端服务器地址</h2><p>常见的 CDN 前端 IP 都可以从 CDN 提供商处获得，例如 CloudFlare 的 IP 地址段在<a href="https://www.cloudflare.com/ips/">这里</a>。</p><p>如果需要找到 Google Cloud Platform 的 IP 地址段，可以使用 <a href="https://groups.google.com/forum/#!topic/gce-discussion/V2n9Ri-T5qg">Google 提供的 TXT 记录</a>查询。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dig @<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> _cloud-netblocks.googleusercontent.com TXT</span><br></pre></td></tr></table></figure><p>获得记录</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">;</span> <span class="string">&lt;&lt;&gt;&gt;</span> <span class="string">DiG</span> <span class="number">9.11</span><span class="number">.0</span><span class="string">-P2</span> <span class="string">&lt;&lt;&gt;&gt;</span> <span class="string">@8.8.8.8</span> <span class="string">_cloud-netblocks.googleusercontent.com</span> <span class="string">TXT</span></span><br><span class="line"><span class="string">;</span> <span class="string">(1</span> <span class="string">server</span> <span class="string">found)</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">global options:</span> <span class="string">+cmd</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">Got answer:</span></span><br><span class="line"><span class="string">;;</span> <span class="string">-&gt;&gt;HEADER&lt;&lt;-</span> <span class="attr">opcode:</span> <span class="string">QUERY,</span> <span class="attr">status:</span> <span class="string">NOERROR,</span> <span class="attr">id:</span> <span class="number">42732</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">flags:</span> <span class="string">qr</span> <span class="string">rd</span> <span class="string">ra;</span> <span class="attr">QUERY:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">ANSWER:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">AUTHORITY:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">ADDITIONAL:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">;</span> <span class="attr">EDNS: version:</span> <span class="number">0</span><span class="string">,</span> <span class="string">flags:;</span> <span class="attr">udp:</span> <span class="number">512</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">QUESTION SECTION:</span></span><br><span class="line"><span class="string">;_cloud-netblocks.googleusercontent.com.</span>        <span class="string">IN</span> <span class="string">TXT</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">ANSWER SECTION:</span></span><br><span class="line"><span class="string">_cloud-netblocks.googleusercontent.com.</span> <span class="number">3599 </span><span class="string">IN</span> <span class="string">TXT</span> <span class="string">&quot;v=spf1 include:_cloud-netblocks1.googleusercontent.com include:_cloud-netblocks2.googleusercontent.com include:_cloud-netblocks3.googleusercontent.com include:_cloud-netblocks4.googleusercontent.com include:_cloud-netblocks5.googleusercontent.com ?all&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">Query time:</span> <span class="number">51</span> <span class="string">msec</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">SERVER:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span><span class="comment">#53(8.8.8.8)</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">WHEN:</span> <span class="string">Wed</span> <span class="string">Feb</span> <span class="number">08</span> <span class="number">20</span><span class="string">:31:29</span> <span class="string">JST</span> <span class="number">2017</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">MSG SIZE  rcvd:</span> <span class="number">331</span></span><br></pre></td></tr></table></figure><p>这里面的 <code>_cloud-netblocks1.googleusercontent.com</code> 等地址即是用于保存 GCP IP 段的地址。继续查询：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> _cloud-netblocks1.googleusercontent.com TXT</span><br></pre></td></tr></table></figure><p>获得记录</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">;</span> <span class="string">&lt;&lt;&gt;&gt;</span> <span class="string">DiG</span> <span class="number">9.11</span><span class="number">.0</span><span class="string">-P2</span> <span class="string">&lt;&lt;&gt;&gt;</span> <span class="string">@8.8.8.8</span> <span class="string">_cloud-netblocks1.googleusercontent.com</span> <span class="string">TXT</span></span><br><span class="line"><span class="string">;</span> <span class="string">(1</span> <span class="string">server</span> <span class="string">found)</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">global options:</span> <span class="string">+cmd</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">Got answer:</span></span><br><span class="line"><span class="string">;;</span> <span class="string">-&gt;&gt;HEADER&lt;&lt;-</span> <span class="attr">opcode:</span> <span class="string">QUERY,</span> <span class="attr">status:</span> <span class="string">NOERROR,</span> <span class="attr">id:</span> <span class="number">22867</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">flags:</span> <span class="string">qr</span> <span class="string">rd</span> <span class="string">ra;</span> <span class="attr">QUERY:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">ANSWER:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">AUTHORITY:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">ADDITIONAL:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">;</span> <span class="attr">EDNS: version:</span> <span class="number">0</span><span class="string">,</span> <span class="string">flags:;</span> <span class="attr">udp:</span> <span class="number">512</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">QUESTION SECTION:</span></span><br><span class="line"><span class="string">;_cloud-netblocks1.googleusercontent.com.</span> <span class="string">IN</span> <span class="string">TXT</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">ANSWER SECTION:</span></span><br><span class="line"><span class="string">_cloud-netblocks1.googleusercontent.com.</span> <span class="number">3599 </span><span class="string">IN</span> <span class="string">TXT</span> <span class="string">&quot;v=spf1 ip4:8.34.208.0/20 ip4:8.35.192.0/21 ip4:8.35.200.0/23 ip4:108.59.80.0/20 ip4:108.170.192.0/20 ip4:108.170.208.0/21 ip4:108.170.216.0/22 ip4:108.170.220.0/23 ip4:108.170.222.0/24 ?all&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">Query time:</span> <span class="number">55</span> <span class="string">msec</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">SERVER:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span><span class="comment">#53(8.8.8.8)</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">WHEN:</span> <span class="string">Wed</span> <span class="string">Feb</span> <span class="number">08</span> <span class="number">20</span><span class="string">:32:39</span> <span class="string">JST</span> <span class="number">2017</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">MSG SIZE  rcvd:</span> <span class="number">270</span></span><br></pre></td></tr></table></figure><p>于是得到了一堆 IP 地址。</p><h2 id="设置-RealIP-模块"><a href="#设置-RealIP-模块" class="headerlink" title="设置 RealIP 模块"></a>设置 RealIP 模块</h2><p>文件 <code>/etc/nginx/snippets/realip.conf</code>，请注意这个位置在其他发行版未必存在，放在 NGINX 配置目录下即可。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set_real_ip_from  <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>;</span><br><span class="line">set_real_ip_from  <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>;</span><br><span class="line">set_real_ip_from  <span class="number">2001</span>:<span class="number">0</span>db8::/<span class="number">32</span>;</span><br><span class="line">real_ip_header    X-Forwarded-For;</span><br></pre></td></tr></table></figure><p>然后在 vhost 配置文件中引用这个配置。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">include</span> snippets/realip.conf;</span></span><br></pre></td></tr></table></figure><p>搞定，重启 NGINX 即可获得客户端真实 IP。</p><p>Note:</p><p>GCP 的 <code>X-Forwarded-For</code> 的客户端 IP 在第一个 <code>,</code> 的前面，所以一般需要 <code>split(&#39;,&#39;)[0]</code>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近要给网站上 CDN 于是折腾了下在 NGINX 部分获取客户端真实 IP 的方案。&lt;/p&gt;
&lt;p&gt;嘛… 意想不到的简单就是…&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="https://blog.phoenixlzx.com/categories/Notes/"/>
    
    
    <category term="NGINX" scheme="https://blog.phoenixlzx.com/tags/NGINX/"/>
    
    <category term="Server" scheme="https://blog.phoenixlzx.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>重新迁移回 GCP</title>
    <link href="https://blog.phoenixlzx.com/2016/12/12/infinite-zheteng-switch-to-gcp/"/>
    <id>https://blog.phoenixlzx.com/2016/12/12/infinite-zheteng-switch-to-gcp/</id>
    <published>2016-12-12T12:49:10.000Z</published>
    <updated>2020-09-14T04:20:19.876Z</updated>
    
    <content type="html"><![CDATA[<p>忍得住打 Call，忍不住折腾。看到黑科技就手痒。</p><a id="more"></a><p><img src="/static/img/posts/2016-12-12-gcp.jpg" alt="Performance with GCP"></p><p>虽然 AWS 用得挺安心不过越来越多的人向我抱怨博客打开速度很慢，想看文章都要等好久什么的。于是纠结了下，还是迁回了最贵但是最快的 Google Cloud Platform。这里记录一下调(zhe)教(teng)过程，毕竟 GCP 的 Cloud CDN 依然在 Alpha/Beta 阶段，可配置的选项实在太少而且很多 caveats。</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>域名</li><li>SSL 证书</li><li>网站程序或内容</li></ul><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>我这样没什么访问量的静态网站用 <code>f1.micro</code> 就好啦~ 不过流量比较大的网站的话，还是建议选择高一些的配置和 SSD。</p><p>然后创建一个实例组(instance group)，确保该实例组包含刚才创建的实例。</p><h3 id="NGINX-配置"><a href="#NGINX-配置" class="headerlink" title="NGINX 配置"></a>NGINX 配置</h3><p>网站等会说。总之先配置好 SSL 和 Health Check。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p <span class="regexp">/var/</span>www/hc</span><br><span class="line"># touch <span class="regexp">/var/</span>www<span class="regexp">/hc/i</span>ndex.html</span><br></pre></td></tr></table></figure><p>默认站点配置 <code>default.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> hc; <span class="comment"># health check</span></span><br><span class="line"><span class="attribute">root</span> /var/www/hc;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">server_name</span> _;</span><br><span class="line"><span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网站配置 <code>example.com.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl http2; </span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"><span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_certificate</span> /etc/ssl/private/example_com.pem;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /etc/ssl/private/example_com.key;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> <span class="string">&quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;</span>;</span><br><span class="line"><span class="attribute">keepalive_timeout</span>    <span class="number">70</span>;</span><br><span class="line"><span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span>  <span class="number">10m</span>;</span><br><span class="line"><span class="attribute">ssl_dhparam</span> /etc/ssl/certs/dhparam.pem;</span><br><span class="line"></span><br><span class="line"><span class="attribute">add_header</span> Strict-Transport-Security max-age=<span class="number">63072000</span>;</span><br><span class="line"><span class="attribute">add_header</span> X-Frame-Options SAMEORIGIN;</span><br><span class="line"><span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span> /var/www/example.com;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(SSL 相关的很多配置步骤省略，请自行查阅其他文档)</p><h3 id="创建负载均衡器"><a href="#创建负载均衡器" class="headerlink" title="创建负载均衡器"></a>创建负载均衡器</h3><p>戳到 Networking 标签，选择 <code>Load balancing</code> 然后创建一个 <code>HTTP(S) Load Balancing</code>。首先为负载均衡器命名，因为要分别创建 2 个负载均衡所以这里可以写例如 <code>website-http</code> 之类作为区分。配置页面的三个标签：</p><ul><li>backend<ul><li>创建一个新的 backend</li><li>backend service 选择 http</li><li>instance group 选择刚才创建的实例组</li><li>port numbers 80</li><li>health check 创建新的 health check 并设置 custom header，和之前 NGINX 里的配置一致，这里是 <code>hc</code></li><li>勾选 Enable Cloud CDN</li></ul></li><li>Host and path rules<ul><li>添加域名对应的 <code>/</code> 和 <code>/*</code> 两个路径规则。如果有特殊需求则另外添加。</li></ul></li><li>Frontend configuration<ul><li>Protocol 选择 HTTP</li><li>Create IP Address 然后 reserve 一个 IP</li></ul></li></ul><p>第二个负载均衡器用于 HTTPS，名称可以是 <code>website-https</code> 这样。配置：</p><ul><li>backend<ul><li>因为配置不一样，所以要再创建一个新的 backend</li><li>backend service 选择 https (要点 Edit)</li><li>instance group 选择刚才创建的同一个实例组</li><li>port numbers 443</li><li>health check 创建新的 health check 并设置协议为 https，custom header 为网站域名（因为要和 SSL 证书相符，示例里是 <code>example.com</code>）</li><li>勾选 Enable Cloud CDN</li></ul></li><li>Host and path rules<ul><li>同上</li></ul></li><li>Frontend configration<ul><li>Protocol 选择 HTTPS</li><li>IP 选择刚才 reserve 的 IP</li><li>创建证书，分别上传签发的证书、CA 证书链和私钥</li></ul></li></ul><h3 id="更新解析-amp-收尾"><a href="#更新解析-amp-收尾" class="headerlink" title="更新解析&amp;收尾"></a>更新解析&amp;收尾</h3><p>将域名的 DNS 解析到刚才 reserve 的 IP 即可。</p><p>至此就是基本的（当前版本的）Google Cloud CDN 配置步骤。还有很多可以自定义和扩展、优化的空间，但是这些需要根据特定的需求变化因此不再详细记录。</p><p>以及，不要忘记在虚拟机里把网站跑起来~</p><p>最后，南酱的 live 超棒(๑•̀ㅂ•́)و✧</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;忍得住打 Call，忍不住折腾。看到黑科技就手痒。&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="https://blog.phoenixlzx.com/categories/Notes/"/>
    
    
  </entry>
  
</feed>
